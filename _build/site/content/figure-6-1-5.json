{"version":1,"kind":"Notebook","sha256":"9fbb237b4698f6bef4f179ef3006eda08ab5215f0be1f56cf5ae8ffa759fb59b","slug":"figure-6-1-5","location":"/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-5.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-5.ipynb","exports":[{"format":"ipynb","filename":"Figure-6-1-5.ipynb","url":"/Figure-6-1-5-518d0b79a54f30374b9358ae68e1f58a.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import scipy\nimport scipy.io as sio\nfrom pathlib import Path\nimport numpy as np\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"06-MT-01-qMT\"\n\n\n#Percentage error\n\nb1NormFittedData_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/fitSyntheticData/b1NormFittedResults.mat')\nb1NormFittedData = np.array(b1NormFittedData_mat[\"b1NormFittedResults\"])\n\nb0NormFittedData_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/fitSyntheticData/b0NormFittedResults.mat')\nb0NormFittedData = np.array(b0NormFittedData_mat[\"b0NormFittedResults\"])\n\nt1NormFittedData_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/fitSyntheticData/t1NormFittedResults.mat')\nt1NormFittedData = np.array(t1NormFittedData_mat[\"t1NormFittedResults\"])\n\n\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib.image import imread\nimport scipy.io\nimport plotly\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\n# PYTHON CODE\ninit_notebook_mode(connected=True)\n\nlabels = [\"B1 map\", \"B0 map\", \"T1 map\"]\nFittedParams = [\"F\", \"kf (s<sup>-1</sup>)\", \"T2,f (s)\", \"T2,r\"]\n\nfig = make_subplots(rows=2, cols=2)\n\n#F\ntrace1_b1 = go.Scatter(x=b1NormFittedData[:,0], y=b1NormFittedData[:,1],\n                       name=\"F\", mode='lines', line=dict(color=\"royalblue\"), visible=True,\n                       hovertemplate=\"Error (%) = %{y}<br>B1 value = %{x} <extra></extra>\")\ntrace1_b0 = go.Scatter(x=b0NormFittedData[:,0], y=b0NormFittedData[:,1],\n                       name=\"F\", mode='lines', line=dict(color=\"royalblue\"), visible=False,\n                       hovertemplate=\"Error (%) = %{y}<br>B0 value = %{x} Hz<extra></extra>\")\ntrace1_t1 = go.Scatter(x=t1NormFittedData[:,0], y=t1NormFittedData[:,1],\n                       name=\"F\", mode='lines', line=dict(color=\"royalblue\"), visible=False,\n                       hovertemplate=\"Error (%) = %{y}<br>T1 value = %{x} s<extra></extra>\")\n\nfig.append_trace(trace1_b1, 1, 1)\nfig.append_trace(trace1_b0, 1, 1)\nfig.append_trace(trace1_t1, 1, 1)\n\n#kf\ntrace2_b1 = go.Scatter(x=b1NormFittedData[:,0], y=b1NormFittedData[:,2],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=True,\n                       hovertemplate=\"Error (%) = %{y}<br>B1 value = %{x} <extra></extra>\")\ntrace2_b0 = go.Scatter(x=b0NormFittedData[:,0], y=b0NormFittedData[:,2],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=False,\n                       hovertemplate=\"Error (%) = %{y}<br>B0 value = %{x} Hz<extra></extra>\")\ntrace2_t1 = go.Scatter(x=t1NormFittedData[:,0], y=t1NormFittedData[:,2],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=False,\n                       hovertemplate=\"Error (%) = %{y}<br>T1 value = %{x} s<extra></extra>\")\n\nfig.append_trace(trace2_b1, 1, 2)\nfig.append_trace(trace2_b0, 1, 2)\nfig.append_trace(trace2_t1, 1, 2)\n\n#T2f\ntrace3_b1 = go.Scatter(x=b1NormFittedData[:,0], y=b1NormFittedData[:,3],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=True,\n                       hovertemplate=\"Error (%) = %{y}<br>B1 value = %{x} <extra></extra>\")\ntrace3_b0 = go.Scatter(x=b0NormFittedData[:,0], y=b0NormFittedData[:,3],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=False,\n                       hovertemplate=\"Error (%) = %{y}<br>B0 value = %{x} Hz<extra></extra>\")\ntrace3_t1 = go.Scatter(x=t1NormFittedData[:,0], y=t1NormFittedData[:,3],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=False,\n                       hovertemplate=\"Error (%) = %{y}<br>T1 value = %{x} s<extra></extra>\")\n\nfig.append_trace(trace3_b1, 2, 1)\nfig.append_trace(trace3_b0, 2, 1)\nfig.append_trace(trace3_t1, 2, 1)\n\n#T2r\ntrace4_b1 = go.Scatter(x=b1NormFittedData[:,0], y=b1NormFittedData[:,4],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=True,\n                       hovertemplate=\"Error (%) = %{y}<br>B1 value = %{x} <extra></extra>\")\ntrace4_b0 = go.Scatter(x=b0NormFittedData[:,0], y=b0NormFittedData[:,4],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=False,\n                       hovertemplate=\"Error (%) = %{y}<br>B0 value = %{x} Hz<extra></extra>\")\ntrace4_t1 = go.Scatter(x=t1NormFittedData[:,0], y=t1NormFittedData[:,4],\n                       name=\"kf\", mode='lines', line=dict(color=\"royalblue\"), visible=False,\n                       hovertemplate=\"Error (%) = %{y}<br>T1 value = %{x} s<extra></extra>\")\n\nfig.append_trace(trace4_b1, 2, 2)\nfig.append_trace(trace4_b0, 2, 2)\nfig.append_trace(trace4_t1, 2, 2)\n\nbuttons = []\nfor i, label in enumerate(labels):\n    visibility = [i==j for j in range(len(labels))]\n    button = dict(\n                label =  label,\n                method = 'update',\n                args = [{'visible': visibility}])\n    buttons.append(button)\n        \nupdatemenus = list([\n    dict(active=0,\n         x=0.65,\n         y=1.1,\n         buttons=buttons\n    )\n])\n\nfig['layout']['showlegend'] = False\nfig['layout']['updatemenus'] = updatemenus\n\nfig.update_xaxes(title_text='Input map', title_font=dict(family='Times New Roman', size=18),\n                 row=1, col=1, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(title_text='Input map', title_font=dict(family='Times New Roman', size=18),\n                 row=1, col=2, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(title_text='Input map', title_font=dict(family='Times New Roman', size=18),\n                 row=2, col=1, showline=True, linewidth=2, linecolor='black')\nfig.update_xaxes(title_text='Input map', title_font=dict(family='Times New Roman', size=18),\n                 row=2, col=2, showline=True, linewidth=2, linecolor='black')\nfig.update_yaxes(range=[-100,100], row=1, col=1, showline=True, linewidth=2, linecolor='black')\nfig.update_yaxes(range=[-100,100], row=1, col=2, showline=True, linewidth=2, linecolor='black')\nfig.update_yaxes(range=[-100,100], row=2, col=1, showline=True, linewidth=2, linecolor='black')\nfig.update_yaxes(range=[-100,100], row=2, col=2, showline=True, linewidth=2, linecolor='black')\n\nfig.update_layout(height=500, width=600, plot_bgcolor='rgba(0,0,0,0)')\nfig.update_layout(annotations=[\n    dict(\n        x=0.20,\n        y=1.1,\n        showarrow=False,\n        text='Input map: ',\n        font=dict(\n            family='Times New Roman',\n            size=22\n            ),\n        xref='paper',\n        yref='paper'\n        ),\n    dict(\n        x=-0.1,\n        y=0.90,\n        showarrow=False,\n        text='% Error in ' + FittedParams[0],\n        font=dict(\n            family='Times New Roman',\n            size=18\n            ),\n        textangle=-90,\n        xref='paper',\n        yref='paper'\n        ),\n    dict(\n        x=0.48,\n        y=0.98,\n        showarrow=False,\n        text='% Error in ' + FittedParams[1],\n        font=dict(\n            family='Times New Roman',\n            size=18\n            ),\n        textangle=-90,\n        xref='paper',\n        yref='paper'\n        ),\n    dict(\n        x=-0.1,\n        y=0.03,\n        showarrow=False,\n        text='% Error in ' + FittedParams[2],\n        font=dict(\n            family='Times New Roman',\n            size=18\n            ),\n        textangle=-90,\n        xref='paper',\n        yref='paper'\n        ),\n    dict(\n        x=0.48,\n        y=0.07,\n        showarrow=False,\n        text='% Error in ' + FittedParams[3],\n        font=dict(\n            family='Times New Roman',\n            size=18\n            ),\n        textangle=-90,\n        xref='paper',\n        yref='paper'\n        )\n])\nfig.update_layout(plot_bgcolor='rgba(0,0,0,0)',\n                 margin=go.layout.Margin(\n                     l=120,\n                     r=40,\n                     b=60,\n                     t=50,\n                     )\n                 )\nfig.update_layout()\n\niplot(fig, filename='basic-line', config=config)","identifier":"qmtfig5jn-code","enumerator":"1","html_id":"qmtfig5jn-code","key":"NSDMLmuHrx"},{"type":"output","id":"PVmkD3Dd-nRqZ-klDG6VM","data":[],"identifier":"qmtfig5jn-output","html_id":"qmtfig5jn-output","key":"KhJfpIEr5Z"}],"identifier":"qmtfig5jn","label":"qmtFig5jn","html_id":"qmtfig5jn","key":"vOICd0W72v"}],"key":"Ahec1ZeLmT"},"references":{"cite":{"order":[],"data":{}}}}