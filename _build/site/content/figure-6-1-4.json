{"version":1,"kind":"Notebook","sha256":"f1305f29f9e5f8f54a2f321e748b561e5d768e67869098bf20e2bfb7eba1892d","slug":"figure-6-1-4","location":"/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-4.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-4.ipynb","exports":[{"format":"ipynb","filename":"Figure-6-1-4.ipynb","url":"/Figure-6-1-4-2164740428d52b546e5ebb9cbc002364.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import scipy\nimport scipy.io as sio\nfrom pathlib import Path\nimport numpy as np\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(__file__).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"06-MT-01-qMT\"\n\n\n# Simulations have been performed and the results have been saved in the folder results.\ndataSim_model_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/dataSim_model.mat')\ndataRaw_model_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/dataRaw_model.mat')\ndataSim_model = np.array(dataSim_model_mat[\"dataSim_modelFit\"])\ndataRaw_model = np.array(dataRaw_model_mat[\"dataRaw_modelFit\"])\n\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib.image import imread\nimport scipy.io\nimport plotly\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\n# PYTHON CODE\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n\nfitModel = [\"Sled Pike RP\", \"Sled Pike CW\", \"Yarnykh\", \"Ramani\"]\n\nfig = go.Figure()\n\n#Add traces (three traces per fitting model)\nfor ii in range(len(fitModel)):\n    if ii==0:\n        vis = True\n    else:\n        vis = False\n    fig.add_trace(go.Scatter(x=dataSim_model[:,0,0], y=dataSim_model[:,1,ii],\n                             name=\"Fitted curve (angle = 142)\", mode='lines', line=dict(color=\"firebrick\"), visible = vis,\n                             hovertemplate=\"Fitted curve (angle = 142)<br>M<sub>z</sub> = %{y}<br>Offset = %{x} Hz<extra></extra>\"))\n    \n    fig.add_trace(go.Scatter(x=dataSim_model[:,0,0], y=dataSim_model[:,2,ii],\n                             name=\"Fitted curve (angle = 426)\", mode='lines', line=dict(color=\"royalblue\"), visible = vis,\n                             hovertemplate=\"Fitted curve (angle = 426)<br>M<sub>z</sub> = %{y}<br>Offset = %{x} Hz<extra></extra>\"))\n    \n    fig.add_trace(go.Scatter(x=dataRaw_model[:,0,0], y=dataRaw_model[:,1,ii],\n                             name=\"Raw data\", mode='markers', line=dict(color=\"darkslategray\"), visible = vis,\n                             hovertemplate=\"Raw data<br>M<sub>z</sub> = %{y}<br>Offset = %{x} Hz<extra></extra>\"))\n\n\nbuttons = []\nfor i, label in enumerate(fitModel):\n    visibility = [False] * 12\n    for j in range(3):\n        visibility[3*i+j] = True\n    button = dict(\n                label =  label,\n                method = 'update',\n                args = [{'visible': visibility}])\n    buttons.append(button)\n        \nupdatemenus = list([\n    dict(active=0,\n         x=0.88,\n         y=1.1,\n         buttons=buttons\n    )\n])\n\nfig['layout']['updatemenus'] = updatemenus\n\nfig.update_layout(height=450, width=580, plot_bgcolor='rgba(0,0,0,0)')\nfig.update_layout(legend=dict(\n        x=0.55,\n        y=0.1,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2),\n    annotations=[\n        dict(\n            x=0.35,\n            y=1.1,\n            showarrow=False,\n            text='Fitting method: ',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.5004254919715793,\n            y=-0.2,\n            showarrow=False,\n            text='Frequency offset \\u0394 (Hz)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.14,\n            y=0.5,\n            showarrow=False,\n            text='Magnetization |M<sub>z</sub>|',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ])\n\nfig.update_xaxes(type=\"log\", range=[2,5], showline=True, linewidth=2, linecolor='black', dtick=1, tickvals=[100,1000,10000,100000], ticktext=[\"10<sup>2</sup>\",\"10<sup>3</sup>\",\"10<sup>4</sup>\",\"10<sup>5</sup>\"])\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black')\n\niplot(fig, filename='dropdown')","identifier":"qmtfig4jn-code","enumerator":"1","html_id":"qmtfig4jn-code","key":"ZvDDb0jz3h"},{"type":"output","id":"-5Bkv1ptal4DmEm6A6DNE","data":[],"identifier":"qmtfig4jn-output","html_id":"qmtfig4jn-output","key":"coukxNzfWc"}],"identifier":"qmtfig4jn","label":"qmtFig4jn","html_id":"qmtfig4jn","key":"lSbRwbIL1e"}],"key":"DKV2Q0Nyep"},"references":{"cite":{"order":[],"data":{}}}}