{"version":1,"kind":"Notebook","sha256":"2b4dd07f2b0525013ec81fa074cb02fde79e59ff99703661e1d9b8f8e5d702b2","slug":"figure-6-2-5","location":"/6 Magnetization Transfer Imaging/2 Magnetization Transfer Ratio/Notebooks/Figure-6-2-5.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/6 Magnetization Transfer Imaging/2 Magnetization Transfer Ratio/Notebooks/Figure-6-2-5.ipynb","exports":[{"format":"ipynb","filename":"Figure-6-2-5.ipynb","url":"/Figure-6-2-5-da65d66e415c9fc8b59737143844fb2d.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nimport numpy as np\nfrom pathlib import Path\n\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"06-MT-02-MTR\"\n\ndata_file = \"fig7.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nMTRs = mat_contents[\"MTRs\"]\nTR = mat_contents[\"TR_range\"][0]\nB1 = mat_contents[\"B1_range\"][0]\n\n# Plot Figure 1\n\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n# The polling here is to ensure that plotly.js has already been loaded before\n# setting display alignment in order to avoid a race condition.\n\n\ndata = [\n    go.Contour(\n        z=MTRs,\n        x = B1,\n        y = TR,\n        contours = dict(\n            coloring ='heatmap',\n            showlabels = True, # show labels on contours\n            labelfont = dict( # label font properties\n                size = 12,\n                color = 'white',\n            )\n        ),\n    )      \n]\n\n\nlayout = go.Layout(\n    width=600,\n    height=600,\n    margin=go.layout.Margin(\n        l=100,\n        r=80,\n        b=100,\n        t=130,\n    ),\n    legend=dict(\n        x=0.25,\n        y=1.2,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    )\n)\n\nfig = dict(data=data, layout=layout)\n\n\niplot(fig, filename = 'fig8.html', config = config)\n","identifier":"mtrfig5jn-code","enumerator":"1","html_id":"mtrfig5jn-code","key":"htiSUehZFl"},{"type":"output","id":"7uvJb0ZUp2rOTCmsn4bxR","data":[],"identifier":"mtrfig5jn-output","html_id":"mtrfig5jn-output","key":"AHVVGnSHFW"}],"identifier":"mtrfig5jn","label":"mtrFig5jn","html_id":"mtrfig5jn","key":"d4xPZGlVlk"}],"key":"mh1iCmCXtF"},"references":{"cite":{"order":[],"data":{}}}}