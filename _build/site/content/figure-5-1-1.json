{"version":1,"kind":"Notebook","sha256":"6c094f40f4aab1187fbd3bd5f1ee94d9ea6852d8bbc89a2403c27b7d9ef22cfc","slug":"figure-5-1-1","location":"/5 B0 Mapping/1 B0 Inhomogeneities/Notebooks/Figure-5-1-1.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/5 B0 Mapping/1 B0 Inhomogeneities/Notebooks/Figure-5-1-1.ipynb","exports":[{"format":"ipynb","filename":"Figure-5-1-1.ipynb","url":"/Figure-5-1-1-58a410b377b38bd7fcf4f366bf71b6cf.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\n\ndata_dir = Path(\"../../../data/05-B0/data/fmap\")\n\nimport math\nimport json\nimport nibabel as nib\nimport numpy as np\nfrom numpy.fft import ifftn, fftn, ifft, fftshift, ifftshift\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom scipy.signal import butter, lfilter, freqz, filtfilt\nfrom scipy.io import loadmat\nimport warnings\nPI_UNICODE = \"\\U0001D70B\"\nCHI_UNICODE = \"\\U0001D712\"\nMICRO_UNICODE = \"\\u00B5\"\nGYRO_BAR_RATIO_H = 42.6e6  # [Hz/T]\n\nfname_mag_e1 = data_dir / \"sub-fmap_magnitude1.nii.gz\"\nfname_mag_e1_json = data_dir / \"sub-fmap_magnitude1.json\"\nfname_phase_e1 = data_dir / \"sub-fmap_phase1.nii.gz\"\nfname_phase_e2 = data_dir / \"sub-fmap_phase2.nii.gz\"\nfname_mask = data_dir / \"mask.nii.gz\"\nfname_fmap = data_dir / \"fmap.nii.gz\"\nmag_e1 = nib.load(fname_mag_e1).get_fdata()[30:-30,8:108,30]\nphase_e1 = nib.load(fname_phase_e1).get_fdata()[30:-30,8:108,30]\nphase_e2 = nib.load(fname_phase_e2).get_fdata()[30:-30,8:108,30]\nfmap_hz = nib.load(fname_fmap).get_fdata()[30:-30,8:108,30]\n# mag_e1 = nib.load(fname_mag_e1).get_fdata()\n# phase_e1 = nib.load(fname_phase_e1).get_fdata()\n# phase_e2 = nib.load(fname_phase_e2).get_fdata()\n# mask = nib.load(fname_mask).get_fdata()\n# fmap_hz = nib.load(fname_fmap).get_fdata()\n\nwith open(fname_mag_e1_json, 'r') as json_data:\n    data = json.load(json_data)\n\nfreq = data[\"ImagingFrequency\"]\nfmap_t = fmap_hz / GYRO_BAR_RATIO_H * 1e6\nfmap_ppm = fmap_hz / freq\n\nfig = go.Figure()\nfig.add_trace(go.Heatmap(z=np.rot90(mag_e1, k=-1),\n                         colorscale='gray',\n                         colorbar=dict(\n                            title=\"a.u.\",\n                            titleside=\"top\",\n                            tickmode=\"array\"\n                         ))\n             )\nfig.add_trace(go.Heatmap(z=np.rot90(phase_e2 / 4095 * 2 * math.pi - math.pi, k=-1),\n                         colorscale='gray',\n                         colorbar=dict(\n                            title=\"Rad\",\n                            titleside=\"top\",\n                            tickmode=\"array\",\n                            tickvals=[-math.pi, 0, math.pi-0.01],\n                            ticktext = [f\"-{PI_UNICODE}\", 0, f'{PI_UNICODE}']\n                        ),\n                         visible=False))\nfig.add_trace(go.Heatmap(z=np.rot90(fmap_hz, k=-1),\n                         colorscale='gray',\n                         colorbar=dict(\n                            title=\"Hz\",\n                            titleside=\"top\",\n                            tickmode=\"array\"\n                        ),\n                         visible=False))\nfig.add_trace(go.Heatmap(z=np.rot90(fmap_t, k=-1),\n                         colorscale='gray',\n                         colorbar=dict(\n                            title=f\"{MICRO_UNICODE}T\",\n                            titleside=\"top\",\n                            tickmode=\"array\"\n                        ),\n                         visible=False))\nfig.add_trace(go.Heatmap(z=np.rot90(fmap_ppm, k=-1),\n                         colorscale='gray',\n                         colorbar=dict(\n                            title=\"ppm\",\n                            titleside=\"top\",\n                            tickmode=\"array\"\n                        ),\n                         visible=False))\n\n\n\nx0=0\ny0=89\nx1=10\ny1=99\nh = 2\nrounded_bottom_left = f' M {x0+h}, {y0} Q {x0}, {y0} {x0}, {y0+h}'#\nrounded_top_left = f' L {x0}, {y1-h} Q {x0}, {y1} {x0+h}, {y1}'\nrounded_top_right = f' L {x1-h}, {y1} Q {x1}, {y1} {x1}, {y1-h}'\nrounded_bottom_right = f' L {x1}, {y0+h} Q {x1}, {y0} {x1-h}, {y0}Z'\npath = rounded_bottom_left + rounded_top_left+\\\n         rounded_top_right+rounded_bottom_right\n\nannotations = ['A', 'B', 'C', 'D', 'E']\nshapes = []\nfor i_shape, annotation in enumerate(annotations):\n    shapes.append(dict(type='path',\n                       path=path,\n                       fillcolor='white',\n                       layer='above',\n                       line=dict(width=1),\n                       label=dict(text=f\"<b>{annotation}</b>\")\n                      )\n                 )\n\nfig.add_shape(shapes[0])\n# Add dropdown\nfig.update_layout(\n    title_text=\"Magnitude\",\n    title_x=0.5,\n    height=500,\n    width=600,\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    method=\"update\",\n                    args=[{\"visible\": [True, False, False, False, False]},\n                          {'shapes': [shapes[0]], \"title\": \"Magnitude\"}],\n                    label=\"Magnitude\",\n                ),\n                dict(\n                    method=\"update\",\n                    args=[{\"visible\": [False, True, False, False, False]},\n                          {'shapes': [shapes[1]], \"title\": \"Phase\"}],\n                    label=\"Phase\",\n                    \n                ),\n                dict(\n                    method=\"update\",\n                    args=[{\"visible\": [False, False, True, False, False]},\n                          {'shapes': [shapes[2]], \"title\": \"B0 Fieldmap (Hz)\"}],\n                    label=\"B0 field map (Hz)\",\n                ),\n                dict(\n                    method=\"update\",\n                    args=[{\"visible\": [False, False, False, True, False]},\n                          {'shapes': [shapes[3]], \"title\": f\"B0 Fieldmap ({MICRO_UNICODE}Tesla)\"}],\n                    label=f\"B0 field map ({MICRO_UNICODE}Tesla)\",\n                ),\n                dict(\n                    method=\"update\",\n                    args=[{\"visible\": [False, False, False, False, True]},\n                          {'shapes': [shapes[4]], \"title\": \"B0 Fieldmap (ppm)\"}],\n                    label=\"B0 field map (ppm)\",\n                )\n            ]),\n            direction=\"down\",\n            showactive=True,\n        )\n    ]\n)\nfig.update_xaxes(showticklabels=False)\nfig.update_yaxes(showticklabels=False)\nfig.show()\n","identifier":"b0fig1jn-code","enumerator":"1","html_id":"b0fig1jn-code","key":"TxqrlDL4w0"},{"type":"output","id":"s1Jx6kQVsdLAQ52rxeOyE","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"63360a229af884be667b78cad25ff419","path":"/63360a229af884be667b78cad25ff419.json"}}}],"identifier":"b0fig1jn-output","html_id":"b0fig1jn-output","key":"kCFHbjz7ng"}],"identifier":"b0fig1jn","label":"b0Fig1jn","html_id":"b0fig1jn","key":"mMmOGyIn1h"}],"key":"xNd0EmcTGm"},"references":{"cite":{"order":[],"data":{}}}}