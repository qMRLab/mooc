{"version":1,"kind":"Notebook","sha256":"242b278f3e3aa3a98dd65958f7e1b1ec9256ac50509c414ea3b5286c1cd1b6d8","slug":"figure-4-3-9","location":"/4 B1 Mapping/03-Filtering/Notebooks/Figure-4-3-9.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/4 B1 Mapping/03-Filtering/Notebooks/Figure-4-3-9.ipynb","exports":[{"format":"ipynb","filename":"Figure-4-3-9.ipynb","url":"/Figure-4-3-9-f91e6c41d1160709e8c8df42ddd07e5c.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\n\ndata_dir = Path(\"../../../data/04-B1-03-Filtering\")\ndata_file = \"b1filt_fig6.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nda_data = mat_contents[\"da_data\"]\nafi_data = mat_contents[\"afi_data\"]\nbs_data = mat_contents[\"bs_data\"]\n\nmask = mat_contents[\"mask\"]\n\nmedian_smoothing_factors = mat_contents[\"median_smoothing_factors\"][0]\n\ngaussian_smoothing_factors = mat_contents[\"gaussian_smoothing_factors\"][0]\n\nspline_smoothing_factors = mat_contents[\"spline_smoothing_factors\"][0]\n\nfrom os import path\nfrom pathlib import Path\nimport os\n\n\n# Imports\n\nfrom pathlib import Path\nimport pandas as pd\nimport json\nimport nibabel as nib\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport glob\n\nxAxis = list(range(1,np.shape(mask)[1]))\nyAxis = list(range(1,np.shape(mask)[0]))\n\n# DA acqs\nda_low = np.concatenate(\n        (\n        np.rot90(da_data['Raw'][0][0], -1), \n        np.rot90(da_data['median_low'][0][0], -1), \n        np.rot90(da_data['gaussian_low'][0][0], -1), \n        np.rot90(da_data['spline_low'][0][0], -1)\n        ), \n        axis=1\n)\nda_medium = np.concatenate(\n        (\n        np.rot90(da_data['Raw'][0][0], -1), \n        np.rot90(da_data['median_medium'][0][0], -1), \n        np.rot90(da_data['gaussian_medium'][0][0], -1), \n        np.rot90(da_data['spline_medium'][0][0], -1)\n        ), \n        axis=1\n)\nda_high = np.concatenate(\n        (\n        np.rot90(da_data['Raw'][0][0], -1), \n        np.rot90(da_data['median_high'][0][0], -1), \n        np.rot90(da_data['gaussian_high'][0][0], -1), \n        np.rot90(da_data['spline_high'][0][0], -1)\n        ), \n        axis=1\n)\n\n# AFI acqs\nafi_low = np.concatenate(\n        (\n        np.rot90(afi_data['Raw'][0][0], -1), \n        np.rot90(afi_data['median_low'][0][0], -1), \n        np.rot90(afi_data['gaussian_low'][0][0], -1), \n        np.rot90(afi_data['spline_low'][0][0], -1)\n        ), \n        axis=1\n)\nafi_medium = np.concatenate(\n        (\n        np.rot90(afi_data['Raw'][0][0], -1), \n        np.rot90(afi_data['median_medium'][0][0], -1), \n        np.rot90(afi_data['gaussian_medium'][0][0], -1), \n        np.rot90(afi_data['spline_medium'][0][0], -1)\n        ), \n        axis=1\n)\nafi_high = np.concatenate(\n        (\n        np.rot90(afi_data['Raw'][0][0], -1), \n        np.rot90(afi_data['median_high'][0][0], -1), \n        np.rot90(afi_data['gaussian_high'][0][0], -1), \n        np.rot90(afi_data['spline_high'][0][0], -1)\n        ), \n        axis=1\n)\n\n# BS acqs\nbs_low = np.concatenate(\n        (\n        np.rot90(bs_data['Raw'][0][0], -1), \n        np.rot90(bs_data['median_low'][0][0], -1), \n        np.rot90(bs_data['gaussian_low'][0][0], -1), \n        np.rot90(bs_data['spline_low'][0][0], -1)\n        ), \n        axis=1\n)\nbs_medium = np.concatenate(\n        (\n        np.rot90(bs_data['Raw'][0][0], -1), \n        np.rot90(bs_data['median_medium'][0][0], -1), \n        np.rot90(bs_data['gaussian_medium'][0][0], -1), \n        np.rot90(bs_data['spline_medium'][0][0], -1)\n        ), \n        axis=1\n)\nbs_high = np.concatenate(\n        (\n        np.rot90(bs_data['Raw'][0][0], -1), \n        np.rot90(bs_data['median_high'][0][0], -1), \n        np.rot90(bs_data['gaussian_high'][0][0], -1), \n        np.rot90(bs_data['spline_high'][0][0], -1)\n        ), \n        axis=1\n)\n\n# Concate methods\n\ndata_low = np.concatenate(\n        (da_low, afi_low, bs_low), \n        axis=0\n)\n\ndata_medium = np.concatenate(\n        (da_medium, afi_medium, bs_medium), \n        axis=0\n)\n\ndata_high = np.concatenate(\n        (da_high, afi_high, bs_high), \n        axis=0\n)\n\n# PYTHON CODE\n# Module imports\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib.image import imread\nimport scipy.io\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import init_notebook_mode, iplot, plot\nconfig={'showLink': False, 'displayModeBar': False, 'responsive': True}\n\ninit_notebook_mode(connected=True)\n\nimport os\nimport markdown\nimport random\nfrom scipy.integrate import quad\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# DA acqs\nda_low = np.concatenate(\n        (\n        np.rot90(da_data['Raw'][0][0], -1), \n        np.rot90(da_data['median_low'][0][0], -1), \n        np.rot90(da_data['gaussian_low'][0][0], -1), \n        np.rot90(da_data['spline_low'][0][0], -1)\n        ), \n        axis=1\n)\nda_medium = np.concatenate(\n        (\n        np.rot90(da_data['Raw'][0][0], -1), \n        np.rot90(da_data['median_medium'][0][0], -1), \n        np.rot90(da_data['gaussian_medium'][0][0], -1), \n        np.rot90(da_data['spline_medium'][0][0], -1)\n        ), \n        axis=1\n)\nda_high = np.concatenate(\n        (\n        np.rot90(da_data['Raw'][0][0], -1), \n        np.rot90(da_data['median_high'][0][0], -1), \n        np.rot90(da_data['gaussian_high'][0][0], -1), \n        np.rot90(da_data['spline_high'][0][0], -1)\n        ), \n        axis=1\n)\n\n# AFI acqs\nafi_low = np.concatenate(\n        (\n        np.rot90(afi_data['Raw'][0][0], -1), \n        np.rot90(afi_data['median_low'][0][0], -1), \n        np.rot90(afi_data['gaussian_low'][0][0], -1), \n        np.rot90(afi_data['spline_low'][0][0], -1)\n        ), \n        axis=1\n)\nafi_medium = np.concatenate(\n        (\n        np.rot90(afi_data['Raw'][0][0], -1), \n        np.rot90(afi_data['median_medium'][0][0], -1), \n        np.rot90(afi_data['gaussian_medium'][0][0], -1), \n        np.rot90(afi_data['spline_medium'][0][0], -1)\n        ), \n        axis=1\n)\nafi_high = np.concatenate(\n        (\n        np.rot90(afi_data['Raw'][0][0], -1), \n        np.rot90(afi_data['median_high'][0][0], -1), \n        np.rot90(afi_data['gaussian_high'][0][0], -1), \n        np.rot90(afi_data['spline_high'][0][0], -1)\n        ), \n        axis=1\n)\n\n# BS acqs\nbs_low = np.concatenate(\n        (\n        np.rot90(bs_data['Raw'][0][0], -1), \n        np.rot90(bs_data['median_low'][0][0], -1), \n        np.rot90(bs_data['gaussian_low'][0][0], -1), \n        np.rot90(bs_data['spline_low'][0][0], -1)\n        ), \n        axis=1\n)\nbs_medium = np.concatenate(\n        (\n        np.rot90(bs_data['Raw'][0][0], -1), \n        np.rot90(bs_data['median_medium'][0][0], -1), \n        np.rot90(bs_data['gaussian_medium'][0][0], -1), \n        np.rot90(bs_data['spline_medium'][0][0], -1)\n        ), \n        axis=1\n)\nbs_high = np.concatenate(\n        (\n        np.rot90(bs_data['Raw'][0][0], -1), \n        np.rot90(bs_data['median_high'][0][0], -1), \n        np.rot90(bs_data['gaussian_high'][0][0], -1), \n        np.rot90(bs_data['spline_high'][0][0], -1)\n        ), \n        axis=1\n)\n\n# Concate methods\n\ndata_low = np.concatenate(\n        (da_low, afi_low, bs_low), \n        axis=0\n)\n\ndata_medium = np.concatenate(\n        (da_medium, afi_medium, bs_medium), \n        axis=0\n)\n\ndata_high = np.concatenate(\n        (da_high, afi_high, bs_high), \n        axis=0\n)\n\n\n# Mask\n\nmasks_concat = np.concatenate((np.rot90(mask,-1), np.rot90(mask,-1), np.rot90(mask,-1), np.rot90(mask,-1)), axis=1)\nmask_grid = np.concatenate((masks_concat, masks_concat, masks_concat), axis=0)\n\nxAxis = np.linspace(0,88*4-1, num=88*4)\nyAxis = np.linspace(0,128*3-1, num=128*3)\n\n\ntrace_low = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.flipud(mask_grid*data_low),\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='RdBu',\n                   colorbar={\"title\": 'B<sub>1</sub>',\n                             'titlefont': dict(\n                                   family='Times New Roman',\n                                   size=26,\n                                   )\n                            },\n                   visible=False)\n                   \ntrace_medium = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.flipud(mask_grid*data_medium),\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='RdBu',\n                   colorbar={\"title\": 'B<sub>1</sub>',\n                             'titlefont': dict(\n                                   family='Times New Roman',\n                                   size=26,\n                                   )\n                            },\n                   visible=True)\n                   \ntrace_high = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.flipud(mask_grid*data_high),\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='RdBu',\n                   colorbar={\"title\": 'B<sub>1</sub>',\n                             'titlefont': dict(\n                                   family='Times New Roman',\n                                   size=26,\n                                   )\n                            },\n                   visible=False)\n\ndata=[trace_low, trace_medium, trace_high]\n\nupdatemenus = list([\n    dict(active=1,\n         x = 0.4,\n         xanchor = 'left',\n         y = -0.08,\n         yanchor = 'bottom',\n         direction = 'up',\n         font=dict(\n                family='Times New Roman',\n                size=16\n            ),\n         buttons=list([   \n            dict(label = 'Weak filter',\n                 method = 'update',\n                 args = [{'visible': [True, False, False]},\n                         ]),\n            dict(label = 'Medium filter',\n                 method = 'update',\n                 args = [\n                            {\n                            'visible': [False, True, False]},\n                           ]),\n            dict(label = 'Strong filter',\n                 method = 'update',\n                 args = [{'visible': [False, False, True]},\n                           ]),\n    ])\n    )\n])\n\nlayout = dict(\n    width=750,\n    height=750,\n    margin = dict(\n                t=40,\n                r=50,\n                b=10,\n                l=50),\n    annotations=[\n        dict(\n            x=0.03,\n            y=1.05,\n            showarrow=False,\n            text='Unfiltered',\n            font=dict(\n                family='Times New Roman',\n                size=30\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.305,\n            y=1.05,\n            showarrow=False,\n            text='Median',\n            font=dict(\n                family='Times New Roman',\n                size=30\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.625,\n            y=1.05,\n            showarrow=False,\n            text='Gaussian',\n            font=dict(\n                family='Times New Roman',\n                size=30\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.94,\n            y=1.05,\n            showarrow=False,\n            text='Spline',\n            font=dict(\n                family='Times New Roman',\n                size=30\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.06,\n            y=0.95,\n            showarrow=False,\n            text='Double Angle',\n            font=dict(\n                family='Times New Roman',\n                size=30\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.06,\n            y=0.5,\n            showarrow=False,\n            text='AFI',\n            font=dict(\n                family='Times New Roman',\n                size=30\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.06,\n            y=0.05,\n            showarrow=False,\n            text='Bloch-Siegert',\n            font=dict(\n                family='Times New Roman',\n                size=30\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis = dict(range = [0,88*4-1], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    yaxis = dict(range = [0,128*3-1], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n\n    showlegend = False,\n    autosize = False,\n    updatemenus=updatemenus\n)\n\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-heatmap', config = config)\n","identifier":"filtfig9jn-code","enumerator":"1","html_id":"filtfig9jn-code","key":"hfgaFHz5dY"},{"type":"output","id":"LR-SN89ngYkuujAi28mgi","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"36dc1271fe0bc5700103073f73068d83","path":"/36dc1271fe0bc5700103073f73068d83.json"},"text/html":{"content_type":"text/html","hash":"35356b9cb120429a491f2fce4d9b7523","path":"/35356b9cb120429a491f2fce4d9b7523.html"}}}],"identifier":"filtfig9jn-output","html_id":"filtfig9jn-output","key":"b43P4tBM0f"}],"identifier":"filtfig9jn","label":"filtFig9jn","html_id":"filtfig9jn","key":"Jlqfg3IlEa"}],"key":"vONWG0VAFo"},"references":{"cite":{"order":[],"data":{}}}}