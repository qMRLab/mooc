{"version":1,"kind":"Notebook","sha256":"d082de0e5cf48e9dce96714035ba39f20fc81fc2cb6ca40cc37770622ab001c7","slug":"figure-6-3-3","location":"/6 Magnetization Transfer Imaging/3 Magnetization Transfer Saturation/Notebooks/Figure-6-3-3.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/6 Magnetization Transfer Imaging/3 Magnetization Transfer Saturation/Notebooks/Figure-6-3-3.ipynb","exports":[{"format":"ipynb","filename":"Figure-6-3-3.ipynb","url":"/Figure-6-3-3-c62f59213259e5cbd52e7175755e3bb1.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nimport numpy as np\nfrom pathlib import Path\n\ndata_dir = Path(\"../../../data/06-MT-03-MTsat/06-MT-03-MTsat\")\ndata_file_a = \"fig2a_mtsat.mat\"\ndata_file_b = \"fig2b_mtsat.mat\"\n\n#Load either archived or generated plot variables\nmat_contents_a = sio.loadmat(data_dir / data_file_a)\nmat_contents_b = sio.loadmat(data_dir / data_file_b)\n\nMTsats_uncorr = mat_contents_a[\"MTsats\"][0]\nMTRs_uncorr = mat_contents_a[\"MTRs\"][0]\nB1s_uncorr = mat_contents_a[\"B1_range\"][0]\nT1s_uncorr = mat_contents_a[\"T1s\"][0]\n\nMTsats_corr = mat_contents_b[\"MTsats\"][0]\nMTRs_corr = mat_contents_b[\"MTRs\"][0]\nB1s_corr = mat_contents_b[\"B1_range\"][0]\nT1s_corr = mat_contents_b[\"T1s\"][0]\n\n# Plot Figure 1\n\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.subplots import make_subplots\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n# The polling here is to ensure that plotly.js has already been loaded before\n# setting display alignment in order to avoid a race condition.\n\n## Setup for plots\nfig = make_subplots(rows=1, cols=3, horizontal_spacing = 0.1)\n\n\nfig.add_trace(\n        go.Scatter(\n        x=B1s_uncorr,\n        y=MTRs_uncorr,\n        hoverinfo = 'y',\n        showlegend=False,\n        visible=True\n        ), row= 1, col=1\n    )\nfig.add_trace(\n        go.Scatter(\n        x=B1s_uncorr,\n        y=T1s_uncorr,\n        hoverinfo = 'y',\n        showlegend=False,\n        visible=True\n        ), row= 1, col=2\n    )\nfig.add_trace(\n        go.Scatter(\n        x=B1s_uncorr,\n        y=MTsats_uncorr,\n        hoverinfo = 'y',\n        showlegend=False,\n        visible=True\n        ), row= 1, col=3\n    )\n\n\nfig.add_trace(\n        go.Scatter(\n        x=B1s_uncorr,\n        y=MTRs_corr,\n        hoverinfo = 'y',\n        showlegend=False,\n        visible=False\n        ), row= 1, col=1\n    )\nfig.add_trace(\n        go.Scatter(\n        x=B1s_uncorr,\n        y=T1s_corr,\n        hoverinfo = 'y',\n        showlegend=False,\n        visible=False\n        ), row= 1, col=2\n    )\nfig.add_trace(\n        go.Scatter(\n        x=B1s_corr,\n        y=MTsats_corr,\n        hoverinfo = 'y',\n        showlegend=False,\n        visible=False\n        ), row= 1, col=3\n    )\n\nlayout = go.Layout(\n    width=900,\n    height=300,\n    margin=go.layout.Margin(\n        l=200,\n        r=30,\n        b=60,\n        t=0,\n    ),\n    annotations=[\n        dict(\n            x=0.51,\n            y=-0.3,\n            showarrow=False,\n            text='B<sub>1</sub>',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=0,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.9,\n            y=-0.3,\n            showarrow=False,\n            text='B<sub>1</sub>',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=0,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.12,\n            y=-0.3,\n            showarrow=False,\n            text='B<sub>1</sub>',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=0,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.08,\n            y=0.5,\n            showarrow=False,\n            text='MTR',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.28,\n            y=0.5,\n            showarrow=False,\n            text='T<sub>1</sub> (s)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.69,\n            y=0.5,\n            showarrow=False,\n            text='MTsat (%)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.24,\n            y=-0.45,\n            showarrow=False,\n            text='B<sub>1</sub> correction?',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range=[35,55]\n    ),\n    xaxis2=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n    ),\n    yaxis2=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range=[0.3,0.9]\n    ),\n    xaxis3=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis3=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range=[4,7]\n    ),\n)\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=0,\n            x=0.57,\n            y=-0.3,\n            buttons=list([\n                dict(label=\"No\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, True, True, False, False, False]},\n                           ]),\n                dict(label=\"Yes\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, False, False, True, True, True]},\n                           ]),\n            ]),\n        )\n    ])\n\nfig.update_layout(layout)\n\nplot(fig, filename = 'mtsatb1.html', config = config)\n","identifier":"mtsatfig3jn-code","enumerator":"1","html_id":"mtsatfig3jn-code","key":"HNUp4BiRLq"},{"type":"output","id":"k5O0q9UwC1sCLFokuIuEr","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"execute_result","execution_count":1,"metadata":{},"data":{"text/plain":{"content":"'mtsatb1.html'","content_type":"text/plain"}}}],"identifier":"mtsatfig3jn-output","html_id":"mtsatfig3jn-output","key":"E0uybT7BTo"}],"identifier":"mtsatfig3jn","label":"mtsatFig3jn","html_id":"mtsatfig3jn","key":"yfblvgGjz3"}],"key":"iCnWa7aUZF"},"references":{"cite":{"order":[],"data":{}}}}