{"version":1,"kind":"Notebook","sha256":"596fe458d89142d56acf963795723ae0b38d6bfdcd2db2d8e8e1e320d836ca81","slug":"figure-5-4-3","location":"/5 B0 Mapping/4 Advanced B0 Mapping Methods/Notebooks/Figure-5-4-3.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/5 B0 Mapping/4 Advanced B0 Mapping Methods/Notebooks/Figure-5-4-3.ipynb","exports":[{"format":"ipynb","filename":"Figure-5-4-3.ipynb","url":"/Figure-5-4-3-a6abb259632ab6f0630c464def755a36.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport numpy as np\nimport plotly.express as px\nimport os\nimport nibabel as nib\nimport numpy as np\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport math\nfrom sklearn.linear_model import LinearRegression\nimport copy\nPI_UNICODE = \"\\U0001D70B\"\nDELTA_UNICODE = \"\\u0394\"\nGYRO_UNICODE = \"\\U0001D6FE\"\nGREEK_DELTA_UNICODE = \"\\u03B4\"\nphase1, phase2, phase3 = (-1, 2, 14)\nphase_wrapped1 = 14-4*math.pi\nphase_unwrapped1 = 14-2*math.pi\nbeg = 0\nend = 0.016\ndef complex_difference(phase1, phase2):\n    \"\"\" Calculates the complex difference between 2 phase arrays (phase2 - phase1)\n\n    Args:\n        phase1 (numpy.ndarray): Array containing phase data in radians\n        phase2 (numpy.ndarray): Array containing phase data in radians. Must be the same shape as phase1.\n\n    Returns:\n        numpy.ndarray: The difference in phase between each voxels of phase2 and phase1 (phase2 - phase1)\n    \"\"\"\n\n    # Calculate phasediff using complex difference\n    comp_0 = np.exp(-1j * phase1)\n    comp_1 = np.exp(1j * phase2)\n    return np.angle(comp_0 * comp_1)\n\ndef umpire_3echoes(phases, times):\n    \"\"\"\n    This function performs unwrapping using the UMPIRE algorithm with 3 echoes. UMPIRE requires echo times that are unevenly spaced.\n    \"\"\"\n    \n    # Complex difference\n    dpTE2 = complex_difference(phases[1], phases[2])\n    dpTE1 = complex_difference(phases[0], phases[1])\n    dpd = complex_difference(dpTE1, dpTE2)\n    # print(\"Diff in phase diff:\" , dpd)\n    dTEs = np.array([times[1]-times[0], times[2]-times[1]])\n    dt_dpd = dTEs[1] - dTEs[0]\n    \n    # Slope\n    slope = dpd / dt_dpd\n    \n    # n wraps in differences\n    n_wraps_dp = np.round((dTEs - dTEs*slope) / (2*math.pi))\n    \n    # Remove wraps in differences\n    dpTE1_prime = dpTE1 - (2*n_wraps_dp[0]*math.pi)\n    dpTE2_prime = dpTE2 - (2*n_wraps_dp[1]*math.pi)\n    \n    # Calculate better slope\n    slope_prime1 = dpTE1_prime / dTEs[0]\n    slope_prime2 = dpTE2_prime / dTEs[1]\n    slope_avg = (slope_prime1 + slope_prime2) / 2\n    \n    # Calculate wraps in original phase\n    n_wraps = np.round((phases - t*slope_avg) / (2*math.pi))\n    \n    # Remove wraps\n    unwrapped_with_phase_offset = phases - 2*math.pi*n_wraps\n    \n    # # Calculate receiver offset\n    # r = (t[0] * unwrapped_with_phase_offset[1] - t[1] * unwrapped_with_phase_offset[0]) / dTEs[0]\n\n    # # Remove receiver phase offset\n    # phase_no_offset = complex_difference(r, unwrapped_with_phase_offset)\n    # # Unwrap one last time\n    # ns = np.round((phase_no_offset - t*slope_avg) / (2*math.pi))\n    # unwrapped_umpire = phase_no_offset - 2*math.pi*ns\n    \n    return unwrapped_with_phase_offset\n\nt = np.array([0.003, 0.011, 0.020])\ny_unwrapped = np.array([1.0, 9.05, 17.75])\nwrapped = copy.deepcopy(y_unwrapped)\nwrapped[0] = np.angle(np.exp(1j*wrapped[0]))\nwrapped[1] = np.angle(np.exp(1j*wrapped[1]))\nwrapped[2] = np.angle(np.exp(1j*wrapped[2]))\nbeg = 0.0\nend = 0.021\n\n# Fit original data\nreg1 = LinearRegression().fit(t.reshape(-1, 1), y_unwrapped.reshape(-1,1))\nfieldmap_rad1 = reg1.coef_[0]  # [rad / s]\nfieldmap_intercept1 = reg1.intercept_[0]  # [rad / s]\nt_predict1 = np.array([beg, end])\ny_predict1 = reg1.predict(t_predict1.reshape(-1,1))[:,0]\n\n# Unwrap with UMPIRE\nunwrapped_umpire = umpire_3echoes(wrapped, t)\n\n# Fit unwrapped data of UMPIRE\nreg2 = LinearRegression().fit(t.reshape(-1, 1), unwrapped_umpire.reshape(-1,1))\n# Slope of linear regression reshaped into the shape of original 3D phase.\nfieldmap_rad2 = reg2.coef_[0]  # [rad / s]\nfieldmap_intercept2 = reg2.intercept_[0]  # [rad / s]\nt_predict2 = np.array([beg, end])\ny_predict2 = reg2.predict(t_predict2.reshape(-1,1))[:,0]\n\n# Plot\nheight_annotations = 7*math.pi + 0.5\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=t, y=wrapped, mode='markers', marker=dict(color='blue'), name='Wrapped'))\nfig.add_trace(go.Scatter(x=t, y=y_unwrapped, mode='markers', marker=dict(color='red'), name='True phase'))\nfig.add_trace(go.Scatter(x=t, y=unwrapped_umpire, mode='markers', marker=dict(color='green'), name='Umpire', visible='legendonly'))\nfig.add_trace(go.Scatter(x=t_predict2, y=y_predict2, mode='lines', marker=dict(color='green'), name='Umpire fit', visible='legendonly'))\nfig.add_trace(go.Scatter(x=[beg, end], y=[math.pi, math.pi], mode='lines', line=dict(color='gray'), showlegend=False))\nfig.add_trace(go.Scatter(x=[beg, end], y=[-math.pi, -math.pi], mode='lines', line=dict(color='gray'), showlegend=False))\nfig.add_trace(go.Scatter(x=[t[0], t[1]], y=[height_annotations, height_annotations], mode='lines+markers', \n                         marker=dict(symbol=\"line-ns-open\", color=\"black\",size=10),\n                         line=dict(color='black'), showlegend=False))\nfig.add_trace(go.Scatter(x=[t[1], t[2]], y=[height_annotations, height_annotations], mode='lines+markers', \n                         marker=dict(symbol=\"line-ns-open\", color=\"black\",size=10),\n                         line=dict(color='black'), showlegend=False))\nfig.add_trace(go.Scatter(x=[t[1], t[2]], y=[height_annotations-3, height_annotations-3], mode='lines+markers', \n                         marker=dict(symbol=\"line-ns-open\", color=\"black\",size=10),\n                         line=dict(color='black'), showlegend=False))\nfig.add_trace(go.Scatter(x=[0.002, 0.002], y=[y_unwrapped[0], y_unwrapped[1]], mode='lines+markers', \n                         marker=dict(symbol=\"line-ew-open\", color=\"black\",size=10),\n                         line=dict(color='black'), showlegend=False))\nfig.add_annotation(x=(t[1]-t[0])/2 + t[0], y=height_annotations+1.15, text=f\"{DELTA_UNICODE}TE1\", showarrow=False)\nfig.add_annotation(x=(t[2]-t[1])/2 + t[1], y=height_annotations+1.15, text=f\"{DELTA_UNICODE}TE2\", showarrow=False)\nfig.add_annotation(x=(t[2]-t[1])/2 + t[1], y=height_annotations+1.15-3, text=f\"{DELTA_UNICODE}TE1 + {GREEK_DELTA_UNICODE}TE\", showarrow=False)\nfig.add_annotation(x=0.0015, y=(y_unwrapped[1] + y_unwrapped[0]) / 2, text=f\">2{PI_UNICODE}\", showarrow=False)\nfig.update_xaxes(title_text=\"Time (ms)\", range=[beg, end])\nfig.update_yaxes(title_text=\"Phase (rad)\", tickmode = 'array', range=[-4,25],\n                 tickvals = [-2*math.pi, 0, 2*math.pi, 4*math.pi, 6*math.pi],\n                 ticktext = [f'-2{PI_UNICODE}', '0', f'2{PI_UNICODE}', f'4{PI_UNICODE}', f'6{PI_UNICODE}'])\nfig.update_layout({\"width\": 800}, title_text=\"Phase unwrapping using UMPIRE algorithm\", title_x=0.5)\nfig.show()\n\n","identifier":"b0fig17jn-code","enumerator":"1","html_id":"b0fig17jn-code","key":"hEz3ur54wh"},{"type":"output","id":"l_OSEQeLUlQhtRA12ybrv","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content":"{\"config\":{\"plotlyServerURL\":\"https://plot.ly\"},\"data\":[{\"marker\":{\"color\":\"blue\"},\"mode\":\"markers\",\"name\":\"Wrapped\",\"type\":\"scatter\",\"x\":[0.003,0.011,0.02],\"y\":[1,2.766814692820414,-1.0995559215387594]},{\"marker\":{\"color\":\"red\"},\"mode\":\"markers\",\"name\":\"True phase\",\"type\":\"scatter\",\"x\":[0.003,0.011,0.02],\"y\":[1,9.05,17.75]},{\"marker\":{\"color\":\"green\"},\"mode\":\"markers\",\"name\":\"Umpire\",\"type\":\"scatter\",\"visible\":\"legendonly\",\"x\":[0.003,0.011,0.02],\"y\":[1,9.05,17.75]},{\"marker\":{\"color\":\"green\"},\"mode\":\"lines\",\"name\":\"Umpire fit\",\"type\":\"scatter\",\"visible\":\"legendonly\",\"x\":[0,0.021],\"y\":[-1.8956221198156662,18.787442396313363]},{\"line\":{\"color\":\"gray\"},\"mode\":\"lines\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[0,0.021],\"y\":[3.141592653589793,3.141592653589793]},{\"line\":{\"color\":\"gray\"},\"mode\":\"lines\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[0,0.021],\"y\":[-3.141592653589793,-3.141592653589793]},{\"line\":{\"color\":\"black\"},\"marker\":{\"color\":\"black\",\"size\":10,\"symbol\":\"line-ns-open\"},\"mode\":\"lines+markers\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[0.003,0.011],\"y\":[22.491148575128552,22.491148575128552]},{\"line\":{\"color\":\"black\"},\"marker\":{\"color\":\"black\",\"size\":10,\"symbol\":\"line-ns-open\"},\"mode\":\"lines+markers\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[0.011,0.02],\"y\":[22.491148575128552,22.491148575128552]},{\"line\":{\"color\":\"black\"},\"marker\":{\"color\":\"black\",\"size\":10,\"symbol\":\"line-ns-open\"},\"mode\":\"lines+markers\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[0.011,0.02],\"y\":[19.491148575128552,19.491148575128552]},{\"line\":{\"color\":\"black\"},\"marker\":{\"color\":\"black\",\"size\":10,\"symbol\":\"line-ew-open\"},\"mode\":\"lines+markers\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[0.002,0.002],\"y\":[1,9.05]}],\"layout\":{\"annotations\":[{\"showarrow\":false,\"text\":\"ΔTE1\",\"x\":0.007,\"y\":23.64114857512855},{\"showarrow\":false,\"text\":\"ΔTE2\",\"x\":0.0155,\"y\":23.64114857512855},{\"showarrow\":false,\"text\":\"ΔTE1 + δTE\",\"x\":0.0155,\"y\":20.64114857512855},{\"showarrow\":false,\"text\":\">2𝜋\",\"x\":0.0015,\"y\":5.025}],\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1,\"#f0f921\"]],\"sequentialminus\":[[0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Phase unwrapping using UMPIRE algorithm\",\"x\":0.5},\"width\":800,\"xaxis\":{\"range\":[0,0.021],\"title\":{\"text\":\"Time (ms)\"}},\"yaxis\":{\"range\":[-4,25],\"tickmode\":\"array\",\"ticktext\":[\"-2𝜋\",\"0\",\"2𝜋\",\"4𝜋\",\"6𝜋\"],\"tickvals\":[-6.283185307179586,0,6.283185307179586,12.566370614359172,18.84955592153876],\"title\":{\"text\":\"Phase (rad)\"}}}}","content_type":"application/vnd.plotly.v1+json"}}}],"identifier":"b0fig17jn-output","html_id":"b0fig17jn-output","key":"OCMkFIdSfy"}],"identifier":"b0fig17jn","label":"b0Fig17jn","html_id":"b0fig17jn","key":"O9bGTQXEdf"}],"key":"gGfrzJNgMG"},"references":{"cite":{"order":[],"data":{}}}}