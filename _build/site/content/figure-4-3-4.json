{"version":1,"kind":"Notebook","sha256":"015f5b1effac9ef287912cc9d7a9314b79e10c2e41690848507c0d648a70de58","slug":"figure-4-3-4","location":"/4 B1 Mapping/03-Filtering/Notebooks/Figure-4-3-4.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"base","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/4 B1 Mapping/03-Filtering/Notebooks/Figure-4-3-4.ipynb","exports":[{"format":"ipynb","filename":"Figure-4-3-4.ipynb","url":"/Figure-4-3-4-ecd167c27791e550e23bcda0223b5490.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\n\ndata_dir = Path(\"../../data/04-B1-03-Filtering\")\ndata_file = \"b1filt_fig1.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nb1_func = mat_contents[\"b1_func\"][0]\ngauss_b1_1d = mat_contents[\"gauss_b1_1d\"]\nmedian_b1_1d = mat_contents[\"median_b1_1d\"]\nspline_b1_1d = mat_contents[\"spline_b1_1d\"]\nvox_range = mat_contents[\"vox_range\"][0]\n\n## Plot\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n# The polling here is to ensure that plotly.js has already been loaded before\n# setting display alignment in order to avoid a race condition.\n\nposition = np.arange(1,len(b1_func)+1)\n\nb1_data = [dict(\n            visible = False,\n            x = position,\n            y = b1_func,\n            name = \"True signal\",\n            hoverinfo = \"y\") for ii in vox_range]\n\nb1_data[5]['visible'] = True\n\n\ndata_gauss = [dict(\n        visible = False,\n        x = position,\n        y = list(gauss_b1_1d[ii-1]),\n        name = \"Gaussian filtered\",\n        hoverinfo = \"y\") for ii in vox_range]\n\ndata_gauss[5]['visible'] = True\n\ndata_median = [dict(\n        visible = False,\n        x = position,\n        y = list(median_b1_1d[ii-1]),\n        name = \"Median filtered\",\n        hoverinfo = \"y\") for ii in vox_range]\n\ndata_median[5]['visible'] = 'legendonly'\n\ndata_spline = [dict(\n        visible = False,\n        x = position,\n        y = list(spline_b1_1d[ii-1]),\n        name = \"Spline filtered\",\n        hoverinfo = \"y\") for ii in vox_range]\n\ndata_spline[5]['visible'] = 'legendonly'\n\ndata = b1_data + data_gauss + data_median + data_spline\n\n# Create and add slider\nsteps = []\n      \nfor i in vox_range:\n    step = dict(\n        method=\"update\",\n        args=[{\"visible\": [False] * len(data_gauss)},],  # layout attribute\n        label = str(i)\n    )\n    step[\"args\"][0][\"visible\"][i-1] = True  # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active=5,\n    currentvalue={\"prefix\": \"Filter width or spline/polynomial order: \"},\n    pad={\"t\": 50},\n    steps=steps\n)]\n\nlayout = go.Layout(\n    width=750,\n    height=750,\n    margin=go.layout.Margin(\n        l=100,\n        r=80,\n        b=100,\n        t=130,\n    ),\n    annotations=[\n        dict(\n            x=-0.15,\n            y=0.50,\n            showarrow=False,\n            text='Signal',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2\n    ),\n    legend=dict(\n        x=0.25,\n        y=1.3,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ),\n    sliders=sliders\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'fig1.html', config = config)\n","identifier":"filtfig4jn-code","enumerator":"1","html_id":"filtfig4jn-code","key":"vIOgQU6ZUX"},{"type":"output","id":"h7HAupwp1ZP8of-6FhsTH","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"21dc6834f450795d7a656905a742bc57","path":"/21dc6834f450795d7a656905a742bc57.json"},"text/html":{"content_type":"text/html","hash":"27177ac2eed9406dd9acc418a27ec842","path":"/27177ac2eed9406dd9acc418a27ec842.html"}}}],"identifier":"filtfig4jn-output","html_id":"filtfig4jn-output","key":"h0UZxh5f8i"}],"identifier":"filtfig4jn","label":"filtFig4jn","html_id":"filtfig4jn","key":"bWdIB3td7i"}],"key":"hMIXOYJiLZ"},"references":{"cite":{"order":[],"data":{}}}}