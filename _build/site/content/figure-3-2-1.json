{"version":1,"kind":"Notebook","sha256":"2189e9dfb84e9b7cc3285ecd7b3b5db4d82c646986178c2697ab1d2098e77937","slug":"figure-3-2-1","location":"/3 T2 Mapping/02-Monoexponential T2 Mapping/Notebooks/Figure-3-2-1.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/3 T2 Mapping/02-Monoexponential T2 Mapping/Notebooks/Figure-3-2-1.ipynb","exports":[{"format":"ipynb","filename":"Figure-3-2-1.ipynb","url":"/Figure-3-2-1-4dc94e8293117d53124483d29de3bca4.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(__file__).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"03-T2\"\ndata_file = \"t2_and_t2star_curvs.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\n# Get the signals and parameters from Matlab\n\n# T2\nT2_signal_WM = mat_contents['signal_WM_T2'][0]\nT2_signal_GM = mat_contents['signal_GM_T2'][0]\n\n# T2*\nT2star_signal_WM = mat_contents['signal_WM_T2star'][0]\nT2star_signal_GM = mat_contents['signal_GM_T2star'][0]\n\n# TE \nparams = mat_contents['params']\nTE = mat_contents['params']['TE'][0][0][0]\n\n## Plot\n\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly.offline import iplot\n\nconfig={'showLink': False, 'displayModeBar': False}\n\n# T2 signals\n\nwm_T2 = go.Scatter(\n    x = TE,\n    y = T2_signal_WM,\n    name = 'T<sub>2</sub> = 109.77 ms (White Matter)',\n    text = 'T<sub>2</sub> = 109.77 ms (White Matter)',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#1f77b4', dash='solid'),\n    visible = True\n)\n\ngm_T2 = go.Scatter(\n    x = TE,\n    y = T2_signal_GM,\n    name = 'T<sub>2</sub> = 96.07 ms (Gray Matter)',\n    text = 'T<sub>2</sub> = 96.07 ms (Gray Matter)',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#ff7f0e', dash='solid'),\n    visible = True\n)\n\n# T2* signals\n\nwm_T2star = go.Scatter(\n    x = TE,\n    y = T2star_signal_WM,\n    name = 'T<sub>2</sub>* = 67.63 ms (White Matter)',\n    text = 'T<sub>2</sub>* = 67.63 ms (White Matter)',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#1f77b4', dash='dot'),\n    visible = False\n)\n\ngm_T2star = go.Scatter(\n    x = TE,\n    y = T2star_signal_GM,\n    name = 'T<sub>2</sub>* = 48.48 ms (Gray Matter)',\n    text = 'T<sub>2</sub>* = 48.48 ms (Gray Matter)',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#ff7f0e', dash='dot'),\n    visible = False\n)\n\ndata = [wm_T2, gm_T2, wm_T2star, gm_T2star]\n\nlayout = go.Layout(\n    width=600,\n    height=375,\n    margin=go.layout.Margin(\n        l=100,\n        r=50,\n        b=60,\n        t=20,\n    ),\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.175,\n            showarrow=False,\n            text='Echo Time â€“ TE (ms)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.15,\n            y=0.50,\n            showarrow=False,\n            text='Transverse Magnetization (M<sub>xy</sub>)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        showgrid=False,\n        linecolor='black',\n        linewidth=2,\n        range=[0, 1]\n    ),\n    legend=dict(\n        x=0.53,\n        y=0.97,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ),\n    updatemenus=[\n        dict(\n            buttons=list([\n                # Display T2\n                dict(\n                    args=[{'visible': [True, True, False, False]}],\n                    label='T2',\n                    method='update'\n                ),\n                # Display T2*\n                dict(\n                    args=[{'visible': [False, False, True, True]}],\n                    label='T2*',\n                    method='update'\n                ),\n                # Display both T2 and T2*\n                dict(\n                    args=[{'visible': [True, True, True, True]}],\n                    label='T2 and T2*',\n                    method='update'\n                ),\n            ]),\n            direction='down',\n            pad={'r': 10, 't': 10},\n            showactive=True,\n            x=0.30,\n            xanchor='left',\n            y=1.0,\n            yanchor='top',\n            font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n            )\n        ),\n    ]\n) \n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'ir_fig_2.html', config = config)","identifier":"t2fig2jn-code","enumerator":"1","html_id":"t2fig2jn-code","key":"caqtGbKeiZ"},{"type":"output","id":"chyhPhhNEevt96ETLV_E2","data":[],"identifier":"t2fig2jn-output","html_id":"t2fig2jn-output","key":"QFBgQxH3GE"}],"identifier":"t2fig2jn","label":"t2Fig2jn","html_id":"t2fig2jn","key":"n1fOBNZBfG"}],"key":"VAlzzQBSU7"},"references":{"cite":{"order":[],"data":{}}}}