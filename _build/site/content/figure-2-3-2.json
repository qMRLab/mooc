{"version":1,"kind":"Notebook","sha256":"58eeef611898cdd3db9c72061c447db7adc9dd3e893dcca4df5fee1c3d52d49c","slug":"figure-2-3-2","location":"/2 T1 Mapping/2-3 MP2RAGE/Notebooks/Figure-2-3-2.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/2 T1 Mapping/2-3 MP2RAGE/Notebooks/Figure-2-3-2.ipynb","exports":[{"format":"ipynb","filename":"Figure-2-3-2.ipynb","url":"/Figure-2-3-2-8d13a98d5c300cbfae8ad77bf60f9904.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n    \n\ndata_dir = dataset_path / \"02-T1-03-MP2RAGE\"\ndata_file = \"fig2.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nT1_map = mat_contents[\"T1_map\"]\nS_INV1 = mat_contents[\"S_INV1\"]\nS_INV2 = mat_contents[\"S_INV2\"]\nB1map = mat_contents[\"B1map\"]\nxAxis = mat_contents[\"xAxis\"][0]\nyAxis = mat_contents[\"yAxis\"][0]\n\n## Plot\n# PYTHON CODE\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\ninit_notebook_mode(connected=True)\n# The polling here is to ensure that plotly.js has already been loaded before\n# setting display alignment in order to avoid a race condition.\n\ntrace1 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=S_INV1,\n                   colorscale='Gray',\n                   showscale = False,\n                   visible=False,\n                   name = 'Signal')\ntrace2 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=S_INV2,\n                   colorscale='Gray',\n                   showscale = False,\n                   visible=False,\n                   name = 'Signal')\ntrace3 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=B1map,\n                   zmin=-0.5,\n                   zmax=0.5,\n                   colorscale='RdBu',\n                   showscale = False,\n                   visible=True,\n                   name = 'S_MP2RAGE')\ntrace5 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=T1_map,\n                   zmin=0.0,\n                   zmax=5000,\n                   colorscale='Portland',\n                   xaxis='x2',\n                   yaxis='y2',\n                   visible=True,\n                   name = 'T1 values (ms)')\n\ndata=[trace1, trace2, trace3, trace5]\n\n\nupdatemenus = list([\n    dict(active=2,\n         x = 0.09,\n         xanchor = 'left',\n         y = -0.15,\n         yanchor = 'bottom',\n         direction = 'up',\n         font=dict(\n                family='Times New Roman',\n                size=16\n            ),\n         buttons=list([   \n            dict(label = 'S<sub>INV1</sub>',\n                 method = 'update',\n                 args = [{'visible': [True, False, False, True]},\n                         ]),\n            dict(label = 'S<sub>INV2</sub>',\n                 method = 'update',\n                 args = [{'visible': [False, True, False, True]},\n                           ]),\n            dict(label = 'S<sub>MP2RAGE</sub>',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, True]},\n                           ])\n        ])\n    )\n])\n\nlayout = dict(\n    width=560,\n    height=345,\n    margin = dict(\n                t=40,\n                r=50,\n                b=10,\n                l=50),\n    annotations=[\n        dict(\n            x=0.055,\n            y=1.15,\n            showarrow=False,\n            text='Input Data',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.6,\n            y=1.15,\n            showarrow=False,\n            text='T<sub>1</sub> map',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=1.22,\n            y=1.15,\n            showarrow=False,\n            text='T<sub>1</sub> (ms)',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis = dict(range = [0,206], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 0.58]),\n    yaxis = dict(range = [0,215], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    xaxis2 = dict(range = [0,206], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0.40, 0.98]),\n    yaxis2 = dict(range = [0,215], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1], anchor='x2'),\n    showlegend = False,\n    autosize = False,\n    updatemenus=updatemenus\n)\n\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-heatmap', config = config)","identifier":"mp2ragefig3jn-code","enumerator":"1","html_id":"mp2ragefig3jn-code","key":"qZd02gh1e2"},{"type":"output","id":"I-1k-vtPBU5ceRnpghq5d","data":[],"identifier":"mp2ragefig3jn-output","html_id":"mp2ragefig3jn-output","key":"KoMauggeB3"}],"identifier":"mp2ragefig3jn","label":"mp2rageFig3jn","html_id":"mp2ragefig3jn","key":"hUq0Yec8AV"}],"key":"KaxdRsj2wu"},"references":{"cite":{"order":[],"data":{}}}}