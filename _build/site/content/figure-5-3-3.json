{"version":1,"kind":"Notebook","sha256":"920d70e4d16af5bce6308f1b19de6ea578017fe09b186b943a01fc3e1af54bc0","slug":"figure-5-3-3","location":"/5 B0 Mapping/3 Phase Unwrapping/Notebooks/Figure-5-3-3.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/5 B0 Mapping/3 Phase Unwrapping/Notebooks/Figure-5-3-3.ipynb","exports":[{"format":"ipynb","filename":"Figure-5-3-3.ipynb","url":"/Figure-5-3-3-c4e9de8199d7e37725b54d46636c8954.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\nimport numpy as np\nimport plotly.express as px\nimport os\nimport nibabel as nib\nimport numpy as np\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport math\nfrom sklearn.linear_model import LinearRegression\nfrom dash import Dash, dcc, html\nimport pandas as pd\nPI_UNICODE = \"\\U0001D70B\"\nGYRO_BAR_RATIO_H = 42.6e6  # [Hz/T]\nimport dash\nimport dash_bootstrap_components as dbc\nfrom dash import Dash, html, dcc\nimport plotly.express as px\n\nt = np.linspace(0, 3, 1001)\ny_unwrapped = t + t**2 - 3 * t**3 + t**4\ny_wrapped = np.mod(y_unwrapped, 2 * math.pi);\n\ny_delta = y_unwrapped.max() - y_unwrapped.min()\nmin_y = y_unwrapped.min() - 2 * math.pi - y_delta * 0.05\nmax_y = y_unwrapped.max() + 2 * math.pi + y_delta * 0.05\n\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=t, y=y_wrapped,\n                          mode='lines',\n                          name='Wrapped  '))\nfig1.update_layout(title_text=\"Wrapped\", title_x=0.25, showlegend=True,\n                   legend={\"x\": 0.03, \"y\": 0.95})\nfig1.update_yaxes(range=[min_y, max_y], title_text=\"rad\", tickmode = 'array',\n                  tickvals = [-2*math.pi, -math.pi, 0, math.pi, 2*math.pi, 3*math.pi, 4*math.pi, 5*math.pi],\n                  ticktext = [f'-2{PI_UNICODE}', f'-{PI_UNICODE}', '0', f'{PI_UNICODE}', f'2{PI_UNICODE}', f'3{PI_UNICODE}', f'4{PI_UNICODE}', f'5{PI_UNICODE}'])\nfig1.update_xaxes(fixedrange=True)\nfig1.update_yaxes(fixedrange=True)\n\nfig2 = go.Figure()\nfig2.add_trace(go.Scatter(x=t, y=y_unwrapped,\n                          mode='lines',\n                          name='Solution 1', showlegend=True))\nfig2.add_trace(go.Scatter(x=t, y=y_unwrapped+2*math.pi,\n                          mode='lines',\n                          name='Solution 2', showlegend=True))\nfig2.add_trace(go.Scatter(x=t, y=y_unwrapped-2*math.pi,\n                          mode='lines',\n                          name='Solution 3', showlegend=True))\nfig2.update_layout(title_text=\"Unwrapped\", title_x=0.75,\n                   legend={\"x\": 0.85, \"y\": 0.95})\nfig2.update_yaxes(range=[min_y, max_y], title_text=\"rad\", tickmode = 'array',\n                  tickvals = [-2*math.pi, -math.pi, 0, math.pi, 2*math.pi, 3*math.pi, 4*math.pi, 5*math.pi],\n                  ticktext = [f'-2{PI_UNICODE}', f'-{PI_UNICODE}', '0', f'{PI_UNICODE}', f'2{PI_UNICODE}', f'3{PI_UNICODE}', f'4{PI_UNICODE}', f'5{PI_UNICODE}'])\nfig2.update_xaxes(fixedrange=True)\nfig2.update_yaxes(fixedrange=True)\napp = Dash(\n    __name__,\n    external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.FONT_AWESOME],\n    external_scripts=[{'src':\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"}]\n)\n\ndef beforeAfterSlide(fig1, fig2, style=None):\n    bfA = []\n    if not style:\n        style = {'width':'100vw', 'height':'100vh'}\n    for key in style:\n        if '%' in style[key]:\n            if key in ['width', 'left']:\n                style[key] = style[key].replace('%','vw')\n            if key in ['top', 'height']:\n                style[key] = style[key].replace('%','vh')\n    bfA.append(html.Div(dcc.Graph(figure=fig2, style=style), className='after'))\n    bfA.append(html.Div(className='middle'))\n    bfA.append(html.Div(dcc.Graph(figure=fig1, style=style), className='before'))\n    return html.Div(bfA, className='beforeAfter', style=style)\n\napp.layout = html.Div(beforeAfterSlide(fig1, fig2, {'height':'75%', 'width':'75%', 'top':'10%', 'left':'6%'}))\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)","identifier":"b0fig12jn-code","enumerator":"1","html_id":"b0fig12jn-code","key":"F2tJ32kDZ8"},{"type":"output","id":"xZDx9AxJDDvHDz54O3yqh","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8050/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x13d0ef410>","content_type":"text/plain"}}}],"identifier":"b0fig12jn-output","html_id":"b0fig12jn-output","key":"K2QSWfX25q"}],"identifier":"b0fig12jn","label":"b0Fig12jn","html_id":"b0fig12jn","key":"yEIhb6dkz5"}],"key":"lVYJ8jjO6J"},"references":{"cite":{"order":[],"data":{}}}}