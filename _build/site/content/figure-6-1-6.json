{"version":1,"kind":"Notebook","sha256":"b765b48aa3fb99a0c826a9a5a80c47246f4914b483c266794fa54d32a5d466f2","slug":"figure-6-1-6","location":"/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-6.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-6.ipynb","exports":[{"format":"ipynb","filename":"Figure-6-1-6.ipynb","url":"/Figure-6-1-6-79f166157309e2074e6f97a8bf4058d1.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import scipy\nimport scipy.io as sio\nfrom pathlib import Path\nimport numpy as np\n\ndata_dir = Path(\"../../../data/06-MT-01-qMT\")\n\nb0map_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/b0mapMAT.mat')\nb0map = np.array(b0map_mat[\"b0mapMAT\"])\nb1map_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/b1mapMAT.mat')\nb1map = np.array(b1map_mat[\"b1mapMAT\"])\nr1map_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/r1mapMAT.mat')\nr1map = np.array(r1map_mat[\"r1mapMAT\"])\nmtdata_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/mtdataMAT.mat')\nmtdata = np.array(mtdata_mat[\"mtdataMAT\"])\nmask_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/maskMAT.mat')\nmask = np.array(mask_mat[\"maskMAT\"])\n\nFmap_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/FmapMAT.mat')\nFmap = np.array(Fmap_mat[\"FmapMAT\"])\nkfmap_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/kfmapMAT.mat')\nkfmap = np.array(kfmap_mat[\"kfmapMAT\"])\nT2fmap_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/T2fmapMAT.mat')\nT2fmap = np.array(T2fmap_mat[\"T2f\"])\nT2rmap_mat = scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/realData/T2rmapMAT.mat')\nT2rmap = np.array(T2rmap_mat[\"T2r\"])\n\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib.image import imread\nimport scipy.io\nimport plotly\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\n# PYTHON CODE\nfrom plotly import tools\n\nxAxis = np.arange(0,88)\nyAxis = np.arange(0,128)\n\nb0map = np.multiply(b0map,mask)\nb1map = np.multiply(b1map,mask)\nr1map = np.multiply(r1map,mask)\nmtdata_angle = np.multiply(mtdata[:,:,:,0].reshape((88,128)),mask)\nFmap = np.multiply(Fmap,mask)\nkfmap = np.multiply(kfmap,mask)\nT2fmap = np.multiply(T2fmap,mask)\nT2rmap = np.multiply(T2rmap,mask)\n\ntrace1 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.rot90(b0map,3),\n                   zmin=-30,\n                   zmax=30,\n                   colorscale='Portland',\n                   colorbar=dict(title = \"B<sub>0</sub> (Hz)\", thickness=35,\n                           tickfont=dict(family='Times New Roman', size=15), ypad=1),\n                   visible=True,\n                   name = 'B<sub>0</sub> (Hz)')\ntrace2 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.rot90(b1map,3),\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='Portland',\n                   colorbar=dict(title = \"B<sub>1</sub>\", thickness=35,\n                           tickfont=dict(family='Times New Roman', size=15), ypad=1),\n                   visible=False,\n                   name = 'B<sub>1</sub> values')\ntrace3 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.rot90(r1map,3),\n                   zmin=0.5,\n                   zmax=1.2,\n                   colorscale='Portland',\n                   colorbar=dict(title = \"R<sub>1</sub> (s<sup>-1</sup>)\", thickness=35,\n                           tickfont=dict(family='Times New Roman', size=15), ypad=1),\n                   visible=False,\n                   name = 'R<sub>1</sub> (s<sup>-1</sup>)')\ntrace4 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.rot90(mtdata_angle,3),\n                   zmin=0.5,\n                   zmax=1,\n                   colorscale='Portland',\n                   colorbar=dict(title = \"MT\", thickness=35,\n                           tickfont=dict(family='Times New Roman', size=15), ypad=1),\n                   visible=False,\n                   name = 'MT (angle 142)')\ntrace5 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.rot90(Fmap,3),\n                   zmin=0.05,\n                   zmax=0.3,\n                   colorscale='Portland',\n                   colorbar=dict(title = \"F\", thickness=35,\n                           tickfont=dict(family='Times New Roman', size=15), ypad=1),\n                   visible=True,\n                   name = 'F')\ntrace6 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.rot90(kfmap,3),\n                   colorscale='Portland',\n                   colorbar=dict(title = \"k<sub>f</sub> (s<sup>-1</sup>)\", thickness=35,\n                           tickfont=dict(family='Times New Roman', size=15), ypad=1),\n                   visible=False,\n                   name = 'k<sub>f</sub> (s<sup>-1</sup>)')\ntrace7 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.rot90(T2fmap,3),\n                   zmin=0,\n                   zmax=0.05,\n                   colorscale='Portland',\n                   colorbar=dict(title = \"T<sub>2f</sub> (ms)\", thickness=35,\n                           tickfont=dict(family='Times New Roman', size=15)),\n                   visible=False,\n                   name = 'T<sub>2f</sub> (ms)')\ntrace8 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=np.rot90(T2rmap,3),\n                   zmin=5e-6,\n                   zmax=25e-6,\n                   colorscale='Portland',\n                   colorbar=dict(title = \"T<sub>2r</sub> (s)\", thickness=35, ticklen=7,\n                           tickfont=dict(family='Times New Roman', size=15)),\n                   visible=False,\n                   name = 'T<sub>2r</sub> (Î¼s)')\n\ndata1=[trace1, trace2, trace3, trace4]\ndata2=[trace5, trace6, trace7, trace8]\n\nupdatemenus = list([\n    dict(active=0,\n         x = 0.2,\n         xanchor = 'left',\n         y = -0.15,\n         yanchor = 'bottom',\n         direction = 'up',\n         font=dict(\n                family='Times New Roman',\n                size=16\n            ),\n         buttons=list([   \n            dict(label = 'B0 map',\n                 method = 'update',\n                 args = [{'visible': [True, False, False, False]},\n                         ]),\n            dict(label = 'B1 map',\n                 method = 'update',\n                 args = [{'visible': [False, True, False, False]},\n                         ]),\n            dict(label = 'R1 map',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, False]},\n                         ]),\n            dict(label = 'MT data',\n                 method = 'update',\n                 args = [{'visible': [False, False, False, True]},\n                         ])\n        ]),\n    )\n])\n\nlayout1 = dict(\n    width=345,\n    height=345,\n    margin = dict(\n                t=40,\n                r=50,\n                b=10,\n                l=50),\n    annotations=[\n        dict(\n            x=0.5,\n            y=1.15,\n            showarrow=False,\n            text='Input maps',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        )\n    ],\n    xaxis = dict(range = [0,85], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    yaxis = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    showlegend = False,\n    autosize = False,\n    updatemenus=updatemenus\n)\n\nfig = dict(data=data1,layout=layout1)\n\niplot(fig, filename = 'basic-heatmap', config = config)","identifier":"qmtfig6jn-code","enumerator":"1","html_id":"qmtfig6jn-code","key":"Pua3wHcYx2"},{"type":"output","id":"0f1GezN-2BT9EvxnNbxVb","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"99532e4867e9f75af7a91d85e93dce62","path":"/99532e4867e9f75af7a91d85e93dce62.json"}}}],"identifier":"qmtfig6jn-output","html_id":"qmtfig6jn-output","key":"jGHCmVR8Ns"}],"identifier":"qmtfig6jn","label":"qmtFig6jn","html_id":"qmtfig6jn","key":"qSsnQCowPf"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"updatemenus = list([    \n    dict(active=0,\n         x = 0.2,\n         xanchor = 'left',\n         y = -0.15,\n         yanchor = 'bottom',\n         direction = 'up',\n         font=dict(\n                family='Times New Roman',\n                size=16),\n         buttons=list([   \n            dict(label = 'F map',\n                 method = 'update',\n                 args = [{'visible': [True, False, False, False]},\n                         ]),\n            dict(label = 'kf map',\n                 method = 'update',\n                 args = [{'visible': [False, True, False, False]},\n                         ]),\n            dict(label = 'T2f map',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, False]},\n                         ]),\n             dict(label = 'T2r map',\n                 method = 'update',\n                 args = [{'visible': [False, False, False, True]},\n                         ])\n        ]),\n    )\n])\n\nlayout2 = dict(\n    width=345,\n    height=345,\n    margin = dict(\n                t=40,\n                r=50,\n                b=10,\n                l=50),\n    annotations=[\n        dict(\n            x=0.5,\n            y=1.15,\n            showarrow=False,\n            text='Fitted maps',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        )\n    ],\n    xaxis = dict(range = [0,85], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    yaxis = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    showlegend = False,\n    autosize = False,\n    updatemenus=updatemenus\n)\n\nfig = dict(data=data2,layout=layout2)\n\niplot(fig, filename = 'basic-heatmap', config = config)","identifier":"qmtfig7cell-code","enumerator":"2","html_id":"qmtfig7cell-code","key":"obYpMkQIgB"},{"type":"output","id":"BvQeQut0KpdtlpPdw6Q46","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"1dfd81eb139da3499aa88beef4a88dd3","path":"/1dfd81eb139da3499aa88beef4a88dd3.json"}}}],"identifier":"qmtfig7cell-output","html_id":"qmtfig7cell-output","key":"c6ETXij1qH"}],"identifier":"qmtfig7cell","label":"qmtFig7cell","html_id":"qmtfig7cell","key":"HwhpnLTX5n"}],"key":"np9r9dQcfq"},"references":{"cite":{"order":[],"data":{}}}}