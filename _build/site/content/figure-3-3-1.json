{"version":1,"kind":"Notebook","sha256":"717be0e3240a678ce727bfc828dc38dda4108740ac633d4b3a785ab3575370e4","slug":"figure-3-3-1","location":"/3 T2 Mapping/03-Multiexponential T2 Mapping/Notebooks/Figure-3-3-1.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/3 T2 Mapping/03-Multiexponential T2 Mapping/Notebooks/Figure-3-3-1.ipynb","exports":[{"format":"ipynb","filename":"Figure-3-3-1.ipynb","url":"/Figure-3-3-1-19d2d94a3e22200a1b3730425537ddf5.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\nimport numpy as np\nimport scipy.io as sio\nfrom pathlib import Path\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"03-T2\"\ndata_file = \"multiexpo_T2_curves.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\n# Get the signals and parameters from Matlab\n\n# Signals\nsignal_mono_MW = np.array(mat_contents['signal_mono_MW'][0])\nsignal_mono_IEW = np.array(mat_contents['signal_mono_IEW'][0])\nsignal_multi_MWF = np.array(mat_contents['signal_multi_MWF'][0])\n\n# MWF from simulation\nFitResult = mat_contents['FitResult']\nMWF = np.round(FitResult['MWF'][0][0]/100, 2)\n\n# TE \nparams = mat_contents['params']\nTE = params['TE'][0][0][0]\n\n# Initialize MWF values for interactive multi-expo curve\ninteractive_multiexpo_signal = MWF*signal_mono_MW + (1-MWF)*signal_mono_IEW\n\n## Plot\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import iplot\n\nconfig={'showLink': False, 'displayModeBar': False}\n\n# Mono-exponential myelin water (MW) signal\n\nMW_T2 = go.Scatter(\n    x = TE,\n    y = signal_mono_MW,\n    name = 'Mono-exponential : Myelin water (MW)',\n    text = 'Myelin Water (MW)',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#2ca02c'),\n    visible = True\n)\n\n# Mono-exponential intra- and extracellular water (IEW) signal\n\nIEW_T2 = go.Scatter(\n    x = TE,\n    y = signal_mono_IEW,\n    name = 'Mono-exponential : Intra- and extracellular water (IEW)',\n    text = 'Intra- and Extracellular Water (IEW)',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#ff7f0e'),\n    visible = True\n)\n\n# Interactive multi-exponential signal (with slider on interactive figure)\n\nmultiexpo_T2_inter = go.Scatter(\n    x = TE,\n    y = interactive_multiexpo_signal[0],\n    name = f'Multi-exponential : MW + IEW',\n    text = f'Interactive multi-expo T2',\n    hoverinfo = 'x+y+text', \n    line=dict(color='#9467bd',dash='dot'),\n    visible = True,\n)\n\ndata = [MW_T2, IEW_T2, multiexpo_T2_inter]\n\n# Define steps for slider\nsteps = [] \nfor value_slider in np.arange(0, 1.05, 0.05):  # For slider with 5% increments\n    interactive_multiexpo_signal = value_slider* signal_mono_MW + (1-value_slider) * signal_mono_IEW\n    steps.append(\n        dict(\n            method='update',\n            args=[\n                {'y': [signal_mono_MW, signal_mono_IEW, interactive_multiexpo_signal]},\n                {'visible': [True, True, True]}, \n                {'name': f'{int(value_slider*100)}% MW   {int((1-value_slider)*100)}% IEW'},\n            ],\n            label=f'<b>{int(value_slider*100)}% MW {int((1-value_slider)*100)}% IEW</b>',\n        )\n    )\n\n\nlayout = go.Layout(\n    width=670,\n    height=475,\n    margin=go.layout.Margin(\n        l=100,\n        r=50,\n        b=30,\n        t=30,\n    ),\n    sliders = [\n            dict(\n            steps=steps,\n            active = int(MWF[0][0] * 20),\n            len = 1.0,\n            pad = {'t':50},\n        )\n    ],\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.175,\n            showarrow=False,\n            text='Echo Time â€“ TE (ms)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.15,\n            y=0.50,\n            showarrow=False,\n            text='Transverse Magnetization (M<sub>xy</sub>)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        showgrid=False,\n        linecolor='black',\n        linewidth=2,\n    ),\n    yaxis=dict(\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    legend=dict(\n        x=0.36,\n        y=0.97,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    )\n) \n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'ir_fig_2.html', config = config)","identifier":"t2fig4jn-code","enumerator":"1","html_id":"t2fig4jn-code","key":"EyGijxSidP"},{"type":"output","id":"IJiyqcs0HhKI_PueGMLZk","data":[],"identifier":"t2fig4jn-output","html_id":"t2fig4jn-output","key":"oLIiweBdLt"}],"identifier":"t2fig4jn","label":"t2Fig4jn","html_id":"t2fig4jn","key":"AO5iXL46fO"}],"key":"dmGacajB3F"},"references":{"cite":{"order":[],"data":{}}}}