{"version":1,"kind":"Notebook","sha256":"035f8d56a6fd95bc43959118fa85e4c1af2645ece8cf0c8ab275811cf6aa2721","slug":"figure-4-2-1","location":"/4 B1 Mapping/02-Actual Flip Angle Imaging/Notebooks/Figure-4-2-1.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/4 B1 Mapping/02-Actual Flip Angle Imaging/Notebooks/Figure-4-2-1.ipynb","exports":[{"format":"ipynb","filename":"Figure-4-2-1.ipynb","url":"/Figure-4-2-1-d278baa042545b5b50c4843b6fdd20a2.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\n\ndata_dir = Path(\"../../../data/04-B1-02-AFI\")\ndata_file = \"fig1.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nparams = mat_contents[\"params\"]\nTR1_range = mat_contents[\"TR1_range\"][0]\nTR2_range = mat_contents[\"TR2_range\"][0]\nsignal1_WM = mat_contents[\"signal1_WM\"]\nsignal2_WM = mat_contents[\"signal2_WM\"]\nsignal1_GM = mat_contents[\"signal1_GM\"]\nsignal2_GM = mat_contents[\"signal2_GM\"]\nsignal1_CSF = mat_contents[\"signal1_CSF\"]\nsignal2_CSF = mat_contents[\"signal2_CSF\"]\n\n## Plot\n# PYTHON CODE\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n\ndata1_1 = [dict(\n        visible = False,\n        line=dict(color='royalblue'),\n        x = params[\"EXC_FA\"][0][0][0].astype(int),\n        y = abs(np.squeeze(np.asarray(signal1_WM[ii]))),\n        name = 'S<sub>1</sub>: T<sub>1</sub> = 0.9 s (White Matter)',\n        text = 'S<sub>1</sub>: T<sub>1</sub> = 0.9 s (White Matter)',\n        hoverinfo = 'x+y+text') for ii in range(len(TR1_range))]\n\ndata1_1[4]['visible'] = True\n\ndata1_2 = [dict(\n        visible = False,\n        line=dict(color='royalblue', dash='dash'),\n        x = params[\"EXC_FA\"][0][0][0],\n        y = abs(np.squeeze(np.asarray(signal2_WM[ii]))),\n        name = 'S<sub>2</sub>: T<sub>1</sub> = 0.9 s (White Matter)',\n        text = 'S<sub>2</sub>: T<sub>1</sub> = 0.9 s (White Matter)',\n        hoverinfo = 'x+y+text') for ii in range(len(TR1_range))]\n\ndata1_2[4]['visible'] = True\n\ndata2_1 = [dict(\n        visible = False,\n        line=dict(color='firebrick'),\n        x = params[\"EXC_FA\"][0][0][0],\n        y = abs(np.squeeze(np.asarray(signal1_GM[ii]))),\n        name = 'S<sub>1</sub>: T<sub>1</sub> = 1.5 s (Grey Matter)',\n        text = 'S<sub>1</sub>: T<sub>1</sub> = 1.5 s (Grey Matter)',\n        hoverinfo = 'x+y+text') for ii in range(len(TR1_range))]\n\ndata2_1[4]['visible'] = True\n\ndata2_2 = [dict(\n        visible = False,\n        line=dict(color='firebrick', dash='dash'),\n        x = params[\"EXC_FA\"][0][0][0],\n        y = abs(np.squeeze(np.asarray(signal2_GM[ii]))),\n        name = 'S<sub>2</sub>: T<sub>1</sub> = 1.5 s (Grey Matter)',\n        text = 'S<sub>2</sub>: T<sub>1</sub> = 1.5 s (Grey Matter)',\n        hoverinfo = 'x+y+text') for ii in range(len(TR1_range))]\n\ndata2_2[4]['visible'] = True\n\ndata3_1 = [dict(\n        visible = False,\n        line=dict(color='orange'),\n        x = params[\"EXC_FA\"][0][0][0],\n        y = abs(np.squeeze(np.asarray(signal1_CSF[ii]))),\n        name = 'S<sub>1</sub>: T<sub>1</sub> = 4.0 s (Cerebrospinal Fluid)',\n        text = 'S<sub>1</sub>: T<sub>1</sub> = 4.0 s (Cerebrospinal Fluid)',\n        hoverinfo = 'x+y+text') for ii in range(len(TR1_range))]\n\ndata3_1[4]['visible'] = True\n\ndata3_2 = [dict(\n        visible = False,\n        line=dict(color='orange', dash='dash'),\n        x = params[\"EXC_FA\"][0][0][0],\n        y = abs(np.squeeze(np.asarray(signal2_CSF[ii]))),\n        name = 'S<sub>2</sub>: T<sub>1</sub> = 4.0 s (Cerebrospinal Fluid)',\n        text = 'S<sub>2</sub>: T<sub>1</sub> = 4.0 s (Cerebrospinal Fluid)',\n        hoverinfo = 'x+y+text') for ii in range(len(TR1_range))]\n\ndata3_2[4]['visible'] = True\n\ndata = data1_1 + data1_2 + data2_1 +data2_2 + data3_1 + data3_2\n\nsteps = []\nfor i in range(len(TR1_range)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data1_1)],\n        label = str(TR1_range[i])\n        )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders=[\n    dict(\n        x = 0,\n        y = -0.09,\n        active = 3,\n        currentvalue = {\"prefix\": \"TR1 value (ms): <b>\"},\n        pad = {\"t\": 50, \"b\": 10},\n        steps = steps)]\n\nlayout = go.Layout(\n    width=650,\n    height=520,\n    margin=go.layout.Margin(\n        l=80,\n        r=40,\n        b=60,\n        t=10,\n    ),\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.18,\n            showarrow=False,\n            text='Excitation Flip Angle (Â°)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.15,\n            y=0.5,\n            showarrow=False,\n            text='Long. Magnetization (M<sub>z</sub>)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.007,\n            y=-0.25,\n            showarrow=False,\n            text='TR<sub>2</sub> = 5TR<sub>1</sub>',\n            font=dict(\n                family='Times New Roman',\n                size=12\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        autorange=False,\n        range=[0, params[\"EXC_FA\"][0][0][0][-1]],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    legend=dict(\n        x=0.5,\n        y=0.9,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ), \n    sliders=sliders\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-line', config = config)\n","identifier":"afifig1jn-code","enumerator":"1","html_id":"afifig1jn-code","key":"oX957O4fcX"},{"type":"output","id":"uRYVydROCWba19gBMpGqp","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"b048152d03f77d30747e872362a96ae7","path":"/b048152d03f77d30747e872362a96ae7.json"},"text/html":{"content_type":"text/html","hash":"6f4245ba236cc18f0bd5421d5512c1b6","path":"/6f4245ba236cc18f0bd5421d5512c1b6.html"}}}],"identifier":"afifig1jn-output","html_id":"afifig1jn-output","key":"Ew1BFnc9fZ"}],"identifier":"afifig1jn","label":"afiFig1jn","html_id":"afifig1jn","key":"M3W9sgta5Q"}],"key":"qaPD5Io5wD"},"references":{"cite":{"order":[],"data":{}}}}