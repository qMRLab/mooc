{"version":1,"kind":"Notebook","sha256":"a0d56ae7440b3f86ffaedc25516f384cef4e2e948f7e73a3699c55a1ea86d602","slug":"figure-4-3-3","location":"/4 B1 Mapping/03-Filtering/Notebooks/Figure-4-3-3.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"base","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/4 B1 Mapping/03-Filtering/Notebooks/Figure-4-3-3.ipynb","exports":[{"format":"ipynb","filename":"Figure-4-3-3.ipynb","url":"/Figure-4-3-3-76dd67eede86d18edf5e45faf2312162.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot Figure 1\n\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.subplots import make_subplots\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n\n\n## Setup for plots\nfig = make_subplots(rows=2, cols=1, vertical_spacing = 0.2,\n                    subplot_titles=(\n    '<b>Signal</b>',\n    '<b>Gaussian-Convolved</b>',))\n\n# Setup signal\nsignal = np.zeros(100)\nsignal[10] = 1\n\nsignal[25:27] = 1\n\nsignal[50] = 1\nsignal[51] = -1\n\nsignal[50] = 1\nsignal[51] = -1\n\nsignal[70:90] = np.random.uniform(0.95,1.05,20)\n\n# Compute convolution\nmu = np.linspace(0.1,5,50)\n\ngauss_convolved = np.zeros([100, len(mu)])\n\ndef gaussian(x, mu, sig):\n    return (\n        1.0 / (np.sqrt(2.0 * np.pi) * sig) * np.exp(-np.power((x - mu) / sig, 2.0) / 2)\n    )\n\nfor ii in range(1,100):\n    if ii <5 or ii>95:\n        continue\n    else:\n        for jj in range(len(mu)):\n            x = np.arange(ii-4, ii+5)\n            gauss_convolved[ii, jj] = np.sum(signal[ii-4:ii+5]*gaussian(x, ii, mu[jj])/np.sum(gaussian(x, ii, mu[jj])))\n\nposition = np.arange(1,101)\n\nsignal_line = [dict(\n            visible = False,\n            x = position,\n            y = signal,\n            name = \"Signal\",\n            mode = 'lines',\n            hoverinfo = \"y\",\n            showlegend=False) for ii in range(len(mu))]\n\nsignal_line[0]['visible'] = True\n\n      \nconvolved_line = [dict(\n            visible = False,\n            x = position,\n            y = gauss_convolved[:, ii],\n            name = \"Mean-Convolved\",\n            mode = 'lines',\n            hoverinfo = \"y\",\n            showlegend=False) for ii in range(len(mu))]\n\nconvolved_line[0]['visible'] = True\n\n\n# Add traces\nfor ii in range(len(mu)):\n    fig.add_trace(go.Scatter(signal_line[ii], line=dict(color=\"black\", width=2)), row= 1, col=1)\n\n\nfor ii in range(len(mu)):\n    fig.add_trace(go.Scatter(convolved_line[ii], line=dict(color=\"blue\", width=2)), row= 2, col=1)\n\n\n# Create and add slider\nsteps = []\n      \nfor i in range(len(mu)):\n    step = dict(\n        method=\"update\",\n        args=[{\"visible\": [False] * len(fig.data), \"showlegend\": [False] * len(fig.data)},],  # layout attribute\n        label = str(np.round(mu[i], 1))\n    )\n    step[\"args\"][0][\"visible\"][i] = True  # Toggle i'th trace to \"visible\"\n    step[\"args\"][0][\"visible\"][i+1*len(mu)] = True  # Toggle i'th trace to \"visible\"\n\n    steps.append(step)\n\nsliders = [dict(\n    active=0,\n    currentvalue={\"prefix\": \"Gaussian width: \"},\n    pad={\"t\": 50},\n    steps=steps\n)]\n\nlayout = go.Layout(\n    width=750,\n    height=600,\n    margin=go.layout.Margin(\n        l=100,\n        r=80,\n        b=100,\n        t=130,\n    ),\n    xaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range = [0,100]\n    ),\n    yaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range = [-1.1,1.1]\n    ),\n    \n    xaxis2=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range = [0,100]\n    ),\n    yaxis2=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range = [-1.1,1.1]\n    ),\n    \n    legend=dict(\n        x=0.25,\n        y=1.3,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ),\n    sliders=sliders\n)\n\nfig.update_layout(layout)\n\niplot(fig, filename = 'fig3.html', config = config)\n","identifier":"filtfig3jn-code","enumerator":"1","html_id":"filtfig3jn-code","key":"qhj3l5qwQ2"},{"type":"output","id":"lXEgmaxkzqPb6T7qv58Y6","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"65f65216a3defb0294503cacb016d6d4","path":"/65f65216a3defb0294503cacb016d6d4.json"},"text/html":{"content_type":"text/html","hash":"34ff21d189edf1cf76d19d147d8cc4c1","path":"/34ff21d189edf1cf76d19d147d8cc4c1.html"}}}],"identifier":"filtfig3jn-output","html_id":"filtfig3jn-output","key":"ZjwIaphdSd"}],"identifier":"filtfig3jn","label":"filtFig3jn","html_id":"filtfig3jn","key":"LbhpTKmmjW"}],"key":"g6Dnz1ygVe"},"references":{"cite":{"order":[],"data":{}}}}