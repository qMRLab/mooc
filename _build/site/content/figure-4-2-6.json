{"version":1,"kind":"Notebook","sha256":"22bdcd6559bdee3412ff6cdc2391997d829b8899d6644b4b4bc2aacfc335bfd9","slug":"figure-4-2-6","location":"/4 B1 Mapping/02-Actual Flip Angle Imaging/Notebooks/Figure-4-2-6.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/4 B1 Mapping/02-Actual Flip Angle Imaging/Notebooks/Figure-4-2-6.ipynb","exports":[{"format":"ipynb","filename":"Figure-4-2-6.ipynb","url":"/Figure-4-2-6-7a321cf8229667f80421d6bde06617d8.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(__file__).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"04-B1-02-AFI\"\ndata_file = \"fig6.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nparams = mat_contents[\"params\"]\nn_range = mat_contents[\"n_range\"][0]\nr_analytical = mat_contents[\"r_analytical\"]\nr_approximation = mat_contents[\"r_approximation\"]\n\n## Plot\n# PYTHON CODE\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n# PYTHON CODE\n\n\ninit_notebook_mode(connected=True)\n\ndata1 = [dict(\n        visible = False,\n        mode = 'lines',\n        x = params[\"EXC_FA\"][0][0][0],\n        y = abs(np.squeeze(np.asarray(r_analytical[ii]))),\n        name = 'Analytical',\n        text = 'Analytical',\n        hoverinfo = 'x+y+text') for ii in range(len(n_range))]\n\ndata1[2]['visible'] = True\n\ndata2 = [dict(\n        visible = False,\n        mode = 'lines',\n        x = params[\"EXC_FA\"][0][0][0],\n        y = abs(np.squeeze(np.asarray(r_approximation[ii]))),\n        name = 'Approximation',\n        text = 'Approximation',\n        hoverinfo = 'x+y+text') for ii in range(len(n_range))]\n\ndata2[2]['visible'] = True\n\ndata = data1 + data2\n\nsteps = []\nfor i in range(len(n_range)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data1)],\n        label = str(n_range[i])\n        )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    x = 0,\n    y = -0.02,\n    active = 2,\n    currentvalue = {\"prefix\": \"n value: <b>\"},\n    pad = {\"t\": 50, \"b\": 10},\n    steps = steps)]\n\nlayout = go.Layout(\n    width=580,\n    height=450,\n    margin=go.layout.Margin(\n        l=80,\n        r=40,\n        b=60,\n        t=10,\n    ),\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.18,\n            showarrow=False,\n            text='Excitation Flip Angle (Â°)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.15,\n            y=0.5,\n            showarrow=False,\n            text='r = S<sub>2</sub>/S<sub>1</sub>',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        autorange=False,\n        range=[0, params['EXC_FA'][0][0][0][-1]],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        autorange=False,\n        range=[0, 1],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    legend=dict(\n        x=0.5,\n        y=0.9,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ), \n    sliders=sliders\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-line', config = config)\n","identifier":"afifig6jn-code","enumerator":"1","html_id":"afifig6jn-code","key":"myxZCyrKEg"},{"type":"output","id":"gN4rQ-QgjaMk-6n8QwA-w","data":[],"identifier":"afifig6jn-output","html_id":"afifig6jn-output","key":"LQnn85wJBb"}],"identifier":"afifig6jn","label":"afiFig6jn","html_id":"afifig6jn","key":"nHulcIbKDo"}],"key":"yJ0QYv2crl"},"references":{"cite":{"order":[],"data":{}}}}