{"version":1,"kind":"Notebook","sha256":"c81c0985b83ed75f1a382af6010159ae0917f7910a75e0ab12a15d2f15fce3d3","slug":"figure-3-2-2","location":"/3 T2 Mapping/02-Monoexponential T2 Mapping/Notebooks/Figure-3-2-2.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/3 T2 Mapping/02-Monoexponential T2 Mapping/Notebooks/Figure-3-2-2.ipynb","exports":[{"format":"ipynb","filename":"Figure-3-2-2.ipynb","url":"/Figure-3-2-2-e00a136ce9a27d9937262b9f4da6682d.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\nimport numpy as np\nimport scipy.io as sio\nfrom pathlib import Path\n\ndata_dir = Path(\"../../../data/03-T2\")\ndata_file = \"t2_noise_simulation.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\n# Get the signals and parameters from Matlab\n\n# Get matlab signals\nsignal_SNR10 =  mat_contents['signal_SNR10'][0]\nsignal_SNR50 =  mat_contents['signal_SNR50'][0]\nsignal_SNR90 =  mat_contents['signal_SNR90'][0]\nsignal_SNR130 =  mat_contents['signal_SNR130'][0]\n\n# Get T2 constants from matlab simulation\nT2_SNR10 =  mat_contents['T2_SNR10'][0]\nT2_SNR50 =  mat_contents['T2_SNR50'][0]\nT2_SNR90 =  mat_contents['T2_SNR90'][0]\nT2_SNR130 =  mat_contents['T2_SNR130'][0]\n\n# TE \nparams =  mat_contents['params'][0]\nTE_signals =  params['TE'][0][0]\nTE =  params['TE'][0][0]\n\n# Noisy data\nSEdata_SNR10 =  np.squeeze(mat_contents['SEdata_SNR10'])\nSEdata_SNR50 =  np.squeeze(mat_contents['SEdata_SNR50'])\nSEdata_SNR90 =  np.squeeze(mat_contents['SEdata_SNR90'])\nSEdata_SNR130 =  np.squeeze(mat_contents['SEdata_SNR130'])\nTE_datapoints =  np.squeeze(mat_contents['EchoTimes'])\nTE_datapoints =  np.squeeze(mat_contents['EchoTimes'])\n\n## Plot\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly.offline import iplot\n\nconfig={'showLink': False, 'displayModeBar': False}\n\n# T2 signals with different SNRs\n\n## SNR = 10 \n\nSNR10 = go.Scatter(\n    x = TE_signals,\n    y = signal_SNR10,\n    name = f'T<sub>2</sub> Fitting (T<sub>2</sub> = {T2_SNR10})',\n    text = f'T<sub>2</sub> = {T2_SNR10}',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#1f77b4', dash='solid'),\n    visible = True\n)\n\ndatapoints_SNR10 = go.Scatter(\n    x = TE_datapoints,\n    y = SEdata_SNR10,\n    name = 'Data points with SNR = 10',\n    hoverinfo = 'x+y',\n    mode='markers', \n    marker=dict(color='red'), \n    visible=True\n)\n\n## SNR = 50\n\nSNR50 = go.Scatter(\n    x = TE,\n    y = signal_SNR50,\n    name = f'T<sub>2</sub> Fitting (T<sub>2</sub> = {T2_SNR50})',\n    text = f'T<sub>2</sub> = {T2_SNR50}',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#1f77b4'),\n    visible = False\n)\n\ndatapoints_SNR50 = go.Scatter(\n    x = TE_datapoints,\n    y = SEdata_SNR50,\n    name = 'Data points with SNR = 50',\n    hoverinfo = 'x+y',\n    mode='markers', \n    marker=dict(color='red'),  \n    visible=False\n)\n\n## SNR = 90\n\nSNR90 = go.Scatter(\n    x = TE_signals,\n    y = signal_SNR90,\n    name = f'T<sub>2</sub> Fitting (T<sub>2</sub> = {T2_SNR90})',\n    text = f'T<sub>2</sub> = {T2_SNR90}',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#1f77b4'),\n    visible = False\n)\n\ndatapoints_SNR90 = go.Scatter(\n    x = TE_datapoints,\n    y = SEdata_SNR90,\n    name = 'Data points with SNR = 90',\n    hoverinfo = 'x+y',\n    mode='markers',  \n    marker=dict(color='red'), \n    visible=False\n)\n\n## SNR = 130\n\nSNR130 = go.Scatter(\n    x = TE_signals,\n    y = signal_SNR130,\n    name = f'T<sub>2</sub> Fitting (T<sub>2</sub> = {T2_SNR130})',\n    text = f'T<sub>2</sub> = {T2_SNR130}',\n    hoverinfo = 'x+y+text',\n    line=dict(color='#1f77b4'),\n    visible = False\n)\n\ndatapoints_SNR130 = go.Scatter(\n    x = TE_datapoints,\n    y = SEdata_SNR130,\n    name = 'Data points with SNR = 130',\n    hoverinfo = 'x+y',\n    mode='markers',  \n    marker=dict(color='red'), \n    visible=False\n)\n\ndata = [SNR10, SNR50, SNR90, SNR130, datapoints_SNR10, datapoints_SNR50, datapoints_SNR90, datapoints_SNR130]\n\nlayout = go.Layout(\n    width=600,\n    height=470,\n    margin=go.layout.Margin(\n        l=100,\n        r=50,\n        b=130,\n        t=20,\n    ),\n    annotations=[\n        dict(\n            x=0.2,\n            y=0.96,\n            showarrow=False,\n            text='<b>True value : T<sub>2</sub> = 109 ms </b>',\n            font=dict(\n                family='Times New Roman',\n                size=14,\n                color = 'black',\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.5004254919715793,\n            y=-0.175,\n            showarrow=False,\n            text='Echo Time â€“ TE (ms)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.15,\n            y=0.50,\n            showarrow=False,\n            text='Transverse Magnetization (M<sub>xy</sub>)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.15,\n            y=-0.35,\n            showarrow=False,\n            text='SNR:',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        range=[0,300],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        showgrid=False,\n        linecolor='black',\n        linewidth=2,\n        range=[0, 1]\n    ),\n    legend=dict(\n        x=0.55,\n        y=0.97,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ),\n    updatemenus=[\n        dict(\n            buttons=list([\n                # Display T2 decay curve and data points with SNR = 10\n                dict(\n                    args=[{'visible': [True, False, False, False, True, False, False, False]}],\n                    label='10',\n                    method='update'\n                ),\n                # Display T2 decay curve and data points with SNR = 50\n                dict(\n                    args=[{'visible': [False, True, False, False, False, True, False, False]}],\n                    label='50',\n                    method='update'\n                ),\n                # Display T2 decay curve and data points with SNR = 90\n                dict(\n                    args=[{'visible': [False, False, True, False, False, False, True, False]}],\n                    label='90',\n                    method='update'\n                ),\n                # Display T2 decay curve and data points with SNR = 130\n                dict(\n                    args=[{'visible': [False, False, False, True, False, False, False, True]}],\n                    label='130',\n                    method='update'\n                ),\n            ]),\n            direction='up',\n            pad={'r': 10, 't': 10},\n            showactive=True,\n            x=0.28,\n            xanchor='left',\n            y=-0.22,\n            yanchor='top',\n            font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n            )\n        ),\n    ]\n) \n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'ir_fig_2.html', config = config)","identifier":"t2fig3jn-code","enumerator":"1","html_id":"t2fig3jn-code","key":"T3cHIvUcav"},{"type":"output","id":"_JP2Y_-zrQGmr-74mY14C","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"5cccf7e311b73a4fa697d2dea02687dc","path":"/5cccf7e311b73a4fa697d2dea02687dc.json"}}}],"identifier":"t2fig3jn-output","html_id":"t2fig3jn-output","key":"DxHOeMVBOk"}],"identifier":"t2fig3jn","label":"t2Fig3jn","html_id":"t2fig3jn","key":"BejXVNCXow"}],"key":"Qz4pme58Vj"},"references":{"cite":{"order":[],"data":{}}}}