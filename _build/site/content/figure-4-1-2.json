{"version":1,"kind":"Notebook","sha256":"2e3c266a7683853e4449002481a64b6128cee5dc03268508152c0119513f52aa","slug":"figure-4-1-2","location":"/4 B1 Mapping/01-Double Angle technique/Notebooks/Figure-4-1-2.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/4 B1 Mapping/01-Double Angle technique/Notebooks/Figure-4-1-2.ipynb","exports":[{"format":"ipynb","filename":"Figure-4-1-2.ipynb","url":"/Figure-4-1-2-395a48296a6c31e6d06f688e03ca0116.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\n\ndata_dir = Path(\"../../../data/04-B1-01-DoubleAngle\")\ndata_file = \"da_fig2.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nnom_first_ang = mat_contents[\"nom_first_ang\"][0][0]\nB1 = mat_contents[\"B1\"][0]\nTR_range = mat_contents[\"TR_range\"][0]\nB1_hard = mat_contents[\"B1_hard\"]\nB1_ideal = mat_contents[\"B1_ideal\"]\n\n## Plot\n\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n# The polling here is to ensure that plotly.js has already been loaded before\n# setting display alignment in order to avoid a race condition.\n\nhard_data = [dict(\n            visible = False,\n            x = B1,\n            y = np.abs(B1_hard[ii,:]),\n            name = \"Refocusing pulse = 180*B1 deg\",\n            line=dict(color=\"red\", width=2),\n            hoverinfo = \"y\") for ii in range(len(TR_range))]\n\nhard_data[22]['visible'] = True\n\n\nideal_data = [dict(\n        visible = False,\n        x = B1,\n        y = np.abs(B1_ideal[ii,:]),\n        name = \"Refocusing pulse = 180 deg\",\n        line=dict(color=\"blue\", width=2),\n        hoverinfo = \"y\") for ii in range(len(TR_range))]\n\nideal_data[22]['visible'] = True\n\nb1_data = [dict(\n        visible = False,\n        x = B1,\n        y = B1,\n        name = \"B1 identity line\",\n        line=dict(color=\"black\", width=1, dash = 'dash'),\n        hoverinfo = \"y\") for ii in range(len(TR_range))]\n\nb1_data[22]['visible'] = True\n\ndata = hard_data + ideal_data + b1_data\n\n# Create and add slider\nsteps = []\n      \nfor i in range(len(TR_range)):\n    step = dict(\n        method=\"update\",\n        args=[{\"visible\": [False] * len(b1_data)},],  # layout attribute\n        label = str(TR_range[i])\n    )\n    step[\"args\"][0][\"visible\"][i] = True  # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active=22,\n    currentvalue={\"prefix\": \"TR (ms) = \"},\n    pad={\"t\": 50},\n    steps=steps\n)]\n\nlayout = go.Layout(\n    width=600,\n    height=600,\n    margin=go.layout.Margin(\n        l=100,\n        r=80,\n        b=100,\n        t=130,\n    ),\n    annotations=[\n        dict(\n            x=-0.15,\n            y=0.50,\n            showarrow=False,\n            text='Computed B1',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.50,\n            y=-0.15,\n            showarrow=False,\n            text='Actual B1',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=0,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range=[0.7,1.3]\n    ),\n    yaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2,\n        range=[0.7,1.3]\n    ),\n    legend=dict(\n        x=0.25,\n        y=1.3,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ),\n    sliders=sliders\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'fig2.html', config = config)\n","identifier":"dafig2jn-code","enumerator":"1","html_id":"dafig2jn-code","key":"FkWcUfRjlA"},{"type":"output","id":"fNzk7rHjkuE75rI7c7y-I","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"ffbc12ddd2f98d57a489563c999e2f9d","path":"/ffbc12ddd2f98d57a489563c999e2f9d.json"},"text/html":{"content_type":"text/html","hash":"50f9efd877f24fd539a3b09d957e212c","path":"/50f9efd877f24fd539a3b09d957e212c.html"}}}],"identifier":"dafig2jn-output","html_id":"dafig2jn-output","key":"XwZoKHNTEB"}],"identifier":"dafig2jn","label":"daFig2jn","html_id":"dafig2jn","key":"yYZ11u6Pyl"}],"key":"TibzVVtqKQ"},"references":{"cite":{"order":[],"data":{}}}}