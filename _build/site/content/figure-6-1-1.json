{"version":1,"kind":"Notebook","sha256":"8a5983868bfeca676bac62bbf0764fcf1d38fdd5918edb5ca8343713dd56987f","slug":"figure-6-1-1","location":"/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-1.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-1.ipynb","exports":[{"format":"ipynb","filename":"Figure-6-1-1.ipynb","url":"/Figure-6-1-1-2610c408319949050eda0607e04966fd.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib.image import imread\nimport scipy.io\nimport plotly\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\nimport os\nimport markdown\nimport random\nfrom scipy.integrate import quad\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef integrand(x, delta, t_2r):\n\n    return (1/abs(3*x**2 - 1))*np.exp(-2*((2*np.pi*delta*t_2r)/(3*x**2 - 1))**2)\n\ninit_notebook_mode(connected=True)\n\ndelta = np.arange(-8000,8100,100) # in Hz\nt_2r = np.arange(6e-6,24e-6,2e-6) # in s\nG_gaussian = np.zeros((len(delta),len(t_2r)+1))\nG_lor = np.zeros((len(delta),len(t_2r)+1))\nG_superlor = np.zeros((len(delta),len(t_2r)+1))\n\nG_gaussian[:,0] = delta\nG_lor[:,0] = delta\nG_superlor[:,0] = delta\n\nfor ii in range(len(t_2r)):\n    for jj in range(len(delta)):\n        G_gaussian[jj,ii+1] = (t_2r[ii]/np.sqrt(2*np.pi))*np.exp(-(2*np.pi*delta[jj]*t_2r[ii])**2/2)\n        \n        G_lor[jj,ii+1] = (t_2r[ii]/np.pi)*1/(1+((2*np.pi*delta[jj]*t_2r[ii])**2))\n        \n        integral = quad(integrand, 0, 1, args=(delta[jj],t_2r[ii]))\n        G_superlor[jj,ii+1] = (t_2r[ii])*(np.sqrt(2/np.pi))*integral[0]\n\n\ninit_notebook_mode(connected=True)\n\nlineshape1 = [dict(\n        visible = False,\n        x = G_gaussian[:,0],\n        y = G_gaussian[:,ii+1],\n        line = dict(color = \"firebrick\"),\n        name = 'Gaussian',\n        hovertemplate = 'Gaussian, G(\\u0394,T<sub>2r</sub>) = %{y}<br>Frequency offset = %{x} Hz<extra></extra>') for ii in range(len(t_2r))]\n\nlineshape1[4]['visible'] = True\n\nlineshape2 = [dict(\n        visible = False,\n        x = G_lor[:,0],\n        y = G_lor[:,ii+1],\n        line = dict(color = \"royalblue\"),\n        name = 'Lorentzian',\n        hovertemplate = 'Lorentzian, G(\\u0394,T<sub>2r</sub>) = %{y}<br>Frequency offset = %{x} Hz<extra></extra>') for ii in range(len(t_2r))]\n\nlineshape2[4]['visible'] = True\n\nlineshape3 = [dict(\n        visible = False,\n        x = G_superlor[:,0],\n        y = G_superlor[:,ii+1],\n        line = dict(color = \"orange\"),\n        name = 'Super Lorentzian',\n        hovertemplate = 'Super Lorentzian, G(\\u0394,T<sub>2r</sub>) = %{y}<br>Frequency offset = %{x} Hz<extra></extra>') for ii in range(len(t_2r))]\n\nlineshape3[4]['visible'] = True\n\ndata = lineshape1 + lineshape2 + lineshape3\n\nsteps = []\nfor i in range(len(t_2r)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(lineshape1)],\n        label = str(round(t_2r[i], 7))\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    x = 0,\n    y = -0.0,\n    active = 3,\n    currentvalue = {\"prefix\": \"T<sub>2r</sub>: <b>\"},\n    pad = {\"t\": 50, \"b\": 10},\n    steps = steps\n)]\n\nlayout = go.Layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    width=580,\n    height=450,\n    margin=go.layout.Margin(\n        l=120,\n        r=80,\n        b=60,\n        t=10,\n    ),\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.2,\n            showarrow=False,\n            text='Frequency offset \\u0394 (Hz)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.2,\n            y=0.5,\n            showarrow=False,\n            text='Absorption lineshape G(\\u0394,T<sub>2r</sub>)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        autorange=False,\n        range=[-8000, 8000],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        autorange=True,\n        type=\"log\",\n        dtick=1,\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    legend=dict(\n        x=0.7,\n        y=0.85,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ), \n    sliders=sliders\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-line', config = config)","identifier":"qmtfig1jn-code","enumerator":"1","html_id":"qmtfig1jn-code","key":"ux8y6Ffh61"},{"type":"output","id":"KObkl925GotEsCaGVh15z","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"fd4ba532e64096dc4a3a5d8c3b4ea681","path":"/fd4ba532e64096dc4a3a5d8c3b4ea681.json"},"text/html":{"content_type":"text/html","hash":"88e312e4c4446e24593ca24739e6fa56","path":"/88e312e4c4446e24593ca24739e6fa56.html"}}}],"identifier":"qmtfig1jn-output","html_id":"qmtfig1jn-output","key":"FfiCDNMTLF"}],"identifier":"qmtfig1jn","label":"qmtFig1jn","html_id":"qmtfig1jn","key":"EGK1ZSadiN"}],"key":"PxGb7KMZcp"},"references":{"cite":{"order":[],"data":{}}}}