{"version":1,"kind":"Notebook","sha256":"667de5008cf2f89b6d38ea98b1c9cd584205a7022f15c9bdd8a439e854faaa4c","slug":"figure-4-3-1","location":"/4 B1 Mapping/03-Filtering/Notebooks/Figure-4-3-1.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/4 B1 Mapping/03-Filtering/Notebooks/Figure-4-3-1.ipynb","exports":[{"format":"ipynb","filename":"Figure-4-3-1.ipynb","url":"/Figure-4-3-1-7407e6afcf99612b683d8a474d74235b.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\n\n# Imports\n\nfrom pathlib import Path\nimport pandas as pd\nimport json\nimport nibabel as nib\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport glob\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"04-B1-02-AFI\"\n\n# Configurations\ndata_folder_name = dataset_path / \"04-B1-03-Filtering/images\"\n    \ndef get_image(filename):\n    # Load image data\n    data = nib.load(Path(data_folder_name) / filename)\n    data_volume = data.get_fdata() \n\n    dims = data_volume.shape\n\n    im = np.squeeze(data_volume[:,:])\n\n    xAxis = np.linspace(0,im.shape[0]-1, num=im.shape[0])\n    yAxis = np.linspace(0,im.shape[1]-1, num=im.shape[1])\n    return im, xAxis, yAxis\n\nim_da_raw1, xAxis_da_raw1, yAxis_da_raw1 = get_image('raw_da_1.nii.gz')\nim_da_raw2, xAxis_da_raw2, yAxis_da_raw1 = get_image('raw_da_2.nii.gz')\nim_da_b1, xAxis_da_b1, yAxis_da_b1 = get_image('b1_clt_tse.nii.gz')\n\nim_afi_raw1, xAxis_afi_raw1, yAxis_afi_raw1 = get_image('raw_afi_1.nii.gz')\nim_afi_raw2, xAxis_afi_raw2, yAxis_afi_raw1 = get_image('raw_afi_2.nii.gz')\nim_afi_b1, xAxis_afi_b1, yAxis_afi_b1 = get_image('b1_clt_afi.nii.gz')\n\nim_bs_raw1, xAxis_bs_raw1, yAxis_bs_raw1 = get_image('raw_bs_1.nii.gz')\nim_bs_raw2, xAxis_bs_raw2, yAxis_bs_raw1 = get_image('raw_bs_1.nii.gz')\nim_bs_b1, xAxis_bs_b1, yAxis_bs_b1 = get_image('b1_clt_gre_bs_cr_fermi.nii.gz')\n\nmask, xAxis_mask, yAxis_mask = get_image('brain_mask_es_2x2x5.nii.gz')\n\nim_da_raw1 = np.flipud(im_da_raw1)\nim_da_raw2 = np.flipud(im_da_raw2)\nim_da_b1 = np.flipud(im_da_b1)\n\nim_afi_raw1 = np.flipud(im_afi_raw1)\nim_afi_raw2 = np.flipud(im_afi_raw2)\nim_afi_b1 = np.flipud(im_afi_b1)\n\nim_bs_raw1 = np.flipud(im_bs_raw1)\nim_bs_raw2 = np.flipud(im_bs_raw2)\nim_bs_b1 = np.flipud(im_bs_b1)\n\nmask = np.flipud(mask)\n\n# Normalize raw\n\nim_da_raw1 = im_da_raw1 / np.max([np.max(im_da_raw1*mask),np.max(im_da_raw2*mask)])*1000\nim_da_raw2 = im_da_raw2 / np.max([np.max(im_da_raw1*mask),np.max(im_da_raw2*mask)])*1000\n\nim_afi_raw1 = im_afi_raw1 / np.max([np.max(im_afi_raw1*mask),np.max(im_afi_raw2*mask)])*1000\nim_afi_raw2 = im_afi_raw2 / np.max([np.max(im_afi_raw1*mask),np.max(im_afi_raw2*mask)])*1000\n\nim_bs_raw1 = im_bs_raw2 / np.max([np.max(np.abs(im_bs_raw1)*mask),np.max(np.abs(im_bs_raw2)*mask)])*np.pi\nim_bs_raw2 = im_bs_raw2 / np.max([np.max(np.abs(im_bs_raw1)*mask),np.max(np.abs(im_bs_raw2)*mask)])*np.pi\n\n\n## Plot\n# PYTHON CODE\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n# PYTHON CODE\n# Module imports\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib.image import imread\nimport scipy.io\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import init_notebook_mode, iplot, plot\nconfig={'showLink': False, 'displayModeBar': False, 'responsive': True}\n\ninit_notebook_mode(connected=True)\n\nimport os\nimport markdown\nimport random\nfrom scipy.integrate import quad\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nxAxis_raw = np.linspace(0,128*2-1, num=128*2)\nxAxis_b1 = np.linspace(0,128-1, num=128*2)\nyAxis = np.linspace(0,88-1, num=88*1)\n\n# DA acqs\nda_acqs = np.concatenate((im_da_raw1, im_da_raw2), axis=1)\n\n# AFI acqs\nafi_acqs = np.concatenate((im_afi_raw1, im_afi_raw2), axis=1)\n\n# DA acqs\nbs_acqs = np.concatenate((im_bs_raw1, im_bs_raw2), axis=1)\n\n# Mask\n\nmasks_concat = np.concatenate((mask, mask), axis=1)\n\ntrace_da_raw = go.Heatmap(x = xAxis_raw,\n                   y = yAxis,\n                   z=masks_concat*da_acqs,\n                   zmin=0,\n                   zmax=1000,\n                   colorscale='gray',\n                   showscale = False,\n                   visible=True)\n\ntrace_da_b1 = go.Heatmap(x = xAxis_b1,\n                   y = yAxis,\n                   z=mask*im_da_b1,\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='RdBu',\n                   colorbar={\"title\": 'B<sub>1</sub>',\n                             'titlefont': dict(\n                                   family='Times New Roman',\n                                   size=26,\n                                   )\n                            },\n                   xaxis='x2',\n                   yaxis='y2',\n                   visible=True)\n                   \ntrace_afi_raw = go.Heatmap(x = xAxis_raw,\n                   y = yAxis,\n                   z=masks_concat*afi_acqs,\n                   zmin=0,\n                   zmax=1000,\n                   colorscale='gray',\n                   showscale = False,\n                   visible=False)\n\ntrace_afi_b1 = go.Heatmap(x = xAxis_b1,\n                   y = yAxis,\n                   z=mask*im_afi_b1,\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='RdBu',\n                   colorbar={\"title\": 'B<sub>1</sub> (ms)',\n                             'titlefont': dict(\n                                   family='Times New Roman',\n                                   size=26,\n                                   )\n                            },\n                   xaxis='x2',\n                   yaxis='y2',\n                   visible=False)\n                   \ntrace_bs_raw = go.Heatmap(x = xAxis_raw,\n                   y = yAxis,\n                   z=masks_concat*bs_acqs,\n                   zmin=-np.pi,\n                   zmax=np.pi,\n                   colorscale='gray',\n                   showscale = False,\n                   visible=False)\n\ntrace_bs_b1 = go.Heatmap(x = xAxis_b1,\n                   y = yAxis,\n                   z=mask*im_bs_b1,\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='RdBu',\n                   colorbar={\"title\": 'B<sub>1</sub> (ms)',\n                             'titlefont': dict(\n                                   family='Times New Roman',\n                                   size=26,\n                                   )\n                            },\n                   xaxis='x2',\n                   yaxis='y2',\n                   visible=False)\n\ndata=[trace_da_raw, trace_da_b1, trace_afi_raw, trace_afi_b1, trace_bs_raw, trace_bs_b1]\n\nupdatemenus = list([\n    dict(active=0,\n         x = 0.3,\n         xanchor = 'left',\n         y = -0.2,\n         yanchor = 'bottom',\n         direction = 'up',\n         font=dict(\n                family='Times New Roman',\n                size=16\n            ),\n         buttons=list([   \n            dict(label = 'Double Angle Mapping',\n                 method = 'update',\n                 args = [{'visible': [True, True, False, False, False, False],\n                          'showscale': [False, True, False, False, False, False],},\n                         ]),\n            dict(label = 'Actual Flip angle Imaging',\n                 method = 'update',\n                 args = [\n                            {\n                            'visible': [False, False, True, True, False, False],\n                            'showscale': [False, False, False, True, False, False],},\n                           ]),\n            dict(label = 'Bloch-Siegert shift',\n                 method = 'update',\n                 args = [{'visible': [False, False, False, False, True, True],\n                            'showscale': [False, False, False, False, False, True],},\n                           ]),\n    ])\n    )\n])\n\nlayout = dict(\n    width=700,\n    height=400,\n    margin = dict(\n                t=40,\n                r=50,\n                b=10,\n                l=50),\n    annotations=[\n        dict(\n            x=0.09,\n            y=1.13,\n            showarrow=False,\n            text='ACQ 1',\n            font=dict(\n                family='Times New Roman',\n                size=28\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.49,\n            y=1.13,\n            showarrow=False,\n            text='ACQ 2',\n            font=dict(\n                family='Times New Roman',\n                size=28\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.9,\n            y=1.13,\n            showarrow=False,\n            text='B<sub>1</sub> (map)',\n            font=dict(\n                family='Times New Roman',\n                size=28\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis = dict(range = [0,225], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 0.83]),\n    yaxis = dict(range = [0,120], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    xaxis2 = dict(range = [0,44], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0.65, 0.98]),\n    yaxis2 = dict(range = [0,120], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1], anchor='x2'),\n    showlegend = False,\n    autosize = False,\n    updatemenus=updatemenus\n)\n\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-heatmap', config = config)\n\n","identifier":"filtfig1jn-code","enumerator":"1","html_id":"filtfig1jn-code","key":"rbKQUWDzHh"},{"type":"output","id":"7KnA2GQ0vynCfpEBG0sG6","data":[],"identifier":"filtfig1jn-output","html_id":"filtfig1jn-output","key":"DKXbud7Vki"}],"identifier":"filtfig1jn","label":"filtFig1jn","html_id":"filtfig1jn","key":"QWeb9IiAK0"}],"key":"l22O1ceQsz"},"references":{"cite":{"order":[],"data":{}}}}