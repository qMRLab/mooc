{"version":1,"kind":"Notebook","sha256":"a85f85514bc5226ab0e870e75f51aba44e326a5e23794bfeefd38034a7027815","slug":"figure-5-1-3","location":"/5 B0 Mapping/1 B0 Inhomogeneities/Notebooks/Figure-5-1-3.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/5 B0 Mapping/1 B0 Inhomogeneities/Notebooks/Figure-5-1-3.ipynb","exports":[{"format":"ipynb","filename":"Figure-5-1-3.ipynb","url":"/Figure-5-1-3-f921a12b072aa6f523d6273780ee211a.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\n\ndata_dir = Path(\"../../../data/05-B0/data\")\n\nimport math\nimport json\nimport nibabel as nib\nimport numpy as np\nfrom numpy.fft import ifftn, fftn, ifft, fftshift, ifftshift\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom scipy.signal import butter, lfilter, freqz, filtfilt\nfrom scipy.io import loadmat\nimport warnings\nPI_UNICODE = \"\\U0001D70B\"\nCHI_UNICODE = \"\\U0001D712\"\nMICRO_UNICODE = \"\\u00B5\"\nGYRO_BAR_RATIO_H = 42.6e6  # [Hz/T]\n\n\n# Load cylinder (Y 64)\nsusc = nib.load(data_dir / \"field_simulations\" / \"cylinder\" / \"Chi.nii.gz\").get_fdata()\nfmap_hz_all = nib.load(data_dir / \"field_simulations\" / \"cylinder\" / \"fmap_hz.nii.gz\").get_fdata()\nlocal_field_cyl = nib.load(data_dir  / \"field_simulations\" / \"cylinder\" / \"local_field.nii.gz\").get_fdata()\n\nfig = make_subplots(rows=1, cols=3, shared_xaxes=False, horizontal_spacing=0.13, vertical_spacing = 0.12, subplot_titles=(f\"Susceptibility distribution ({CHI_UNICODE})\", \"Simulated B0 map\", \"Simulated B0 map<br>no background field\"), specs=[[{\"type\": \"Heatmap\"}, {\"type\": \"Heatmap\"}, {\"type\": \"Heatmap\"}]])\nfig.add_trace(go.Heatmap(z=susc, colorscale='gray', colorbar_x=1/3 - 0.09, colorbar=dict(title=\"ppm\", titleside=\"top\")), 1, 1)\nfig.add_trace(go.Heatmap(z=fmap_hz_all, colorscale='gray', colorbar_x=2/3 - 0.045, colorbar=dict(title=\"Hz\", titleside=\"top\")), 1, 2)\nfig.add_trace(go.Heatmap(z=local_field_cyl, colorscale='gray', colorbar_x=1-0.004, colorbar=dict(title=\"Hz\", titleside=\"top\")), 1, 3)\n\n### Create buttons for drop down menu\nlabels = [\"Cylinders\", \"Brain\"]\nbuttons = []\nfor i, label in enumerate(labels):\n    if label == \"Cylinders\":\n        visibility = [True, True, True, False, False, False]\n    else:\n        visibility = [False, False, False, True, True, True]\n    button = dict(\n                 label =  label,\n                 method = 'update',\n                 args = [{'visible': visibility},\n                         {'title': \" \"}])\n    buttons.append(button)\n\nupdatemenus = list([\n    dict(active=0,\n         x=0.58,\n         y=1.5,\n         buttons=buttons,\n         showactive=True,\n    )\n])\n\nfig.update_xaxes(showticklabels=False)\nfig.update_yaxes(showticklabels=False)\nfig.update_layout({\"height\": 350, \"width\": 750},\n                  title_text=\" \",\n                  title_x=0.5,\n                  updatemenus=updatemenus,\n                  showlegend=False\n                 )\nfig.show()","identifier":"b0fig3jn-code","enumerator":"1","html_id":"b0fig3jn-code","key":"UJ8qN68OL1"},{"type":"output","id":"CtafhQv6_T1Ks6ZKVZssj","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"f6a075215339f126743afbc2a53c2735","path":"/f6a075215339f126743afbc2a53c2735.json"}}}],"identifier":"b0fig3jn-output","html_id":"b0fig3jn-output","key":"KRXXCAQiah"}],"identifier":"b0fig3jn","label":"b0Fig3jn","html_id":"b0fig3jn","key":"tS8yui8xQ3"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\n\ndata_dir = Path(\"../../../data/05-B0/data\")\n\nimport math\nimport json\nimport nibabel as nib\nimport numpy as np\nfrom numpy.fft import ifftn, fftn, ifft, fftshift, ifftshift\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom scipy.signal import butter, lfilter, freqz, filtfilt\nfrom scipy.io import loadmat\nimport warnings\nPI_UNICODE = \"\\U0001D70B\"\nCHI_UNICODE = \"\\U0001D712\"\nMICRO_UNICODE = \"\\u00B5\"\nGYRO_BAR_RATIO_H = 42.6e6  # [Hz/T]\n\n\n# Load cylinder (Y 64)\nsusc = nib.load(data_dir / \"field_simulations\" / \"cylinder\" / \"Chi.nii.gz\").get_fdata()\nfmap_hz_all = nib.load(data_dir / \"field_simulations\" / \"cylinder\" / \"fmap_hz.nii.gz\").get_fdata()\nlocal_field_cyl = nib.load(data_dir  / \"field_simulations\" / \"cylinder\" / \"local_field.nii.gz\").get_fdata()\n\n# Load brain (Z 210)\nsusc_brain = nib.load(data_dir / \"field_simulations\" / \"brain\" / \"chi_masked.nii.gz\").get_fdata()\nfmap_hz_brain_all = nib.load(data_dir / \"field_simulations\" / \"brain\" / \"fmap_masked.nii.gz\").get_fdata()\nlocal_field_brain = nib.load(data_dir / \"field_simulations\" / \"brain\" / \"local_field.nii.gz\").get_fdata()\n\n# Rotate brain\n\nsusc_brain = np.rot90(susc_brain, -1)\nfmap_hz_brain_all = np.rot90(fmap_hz_brain_all, -1)\nlocal_field_brain = np.rot90(local_field_brain, -1)\n\nfig = make_subplots(rows=1, cols=3, shared_xaxes=False, horizontal_spacing=0.13, vertical_spacing = 0.12, subplot_titles=(f\"Susceptibility distribution ({CHI_UNICODE})\", \"Simulated B0 map\", \"Simulated B0 map<br>no background field\"), specs=[[{\"type\": \"Heatmap\"}, {\"type\": \"Heatmap\"}, {\"type\": \"Heatmap\"}]])\nfig.add_trace(go.Heatmap(z=susc, colorscale='gray', colorbar_x=1/3 - 0.09, colorbar=dict(title=\"ppm\", titleside=\"top\")), 1, 1)\nfig.add_trace(go.Heatmap(z=fmap_hz_all, colorscale='gray', colorbar_x=2/3 - 0.045, colorbar=dict(title=\"Hz\", titleside=\"top\")), 1, 2)\nfig.add_trace(go.Heatmap(z=local_field_cyl, colorscale='gray', colorbar_x=1-0.004, colorbar=dict(title=\"Hz\", titleside=\"top\")), 1, 3)\nfig.add_trace(go.Heatmap(z=np.rot90(susc_brain, k=-1), colorscale='gray', colorbar_x=1/3 - 0.09, zmin=-0.5, zmax=0.5, colorbar=dict(title=\"ppm\", titleside=\"top\"), visible=False), 1, 1)\nfig.add_trace(go.Heatmap(z=np.rot90(fmap_hz_brain_all, k=-1), colorscale='gray', colorbar_x=2/3 - 0.045, zmin=1100, zmax=2300, colorbar=dict(title=\"Hz\", titleside=\"top\"), visible=False), 1, 2)\nfig.add_trace(go.Heatmap(z=np.rot90(local_field_brain, k=-1), colorscale='gray', zmin=-4, zmax=4, colorbar_x=1-0.004, colorbar=dict(title=\"Hz\", titleside=\"top\"), visible=False), 1, 3)\n\nfig.update_xaxes(showticklabels=False)\nfig.update_yaxes(showticklabels=False)\nfig.update_layout({\"height\": 350, \"width\": 700},\n                  title_text=\" \",\n                  title_x=0.5,\n                  showlegend=False\n                 )\n\n# Add annotation for \"a\" (Figure 5-a)\nfig.add_annotation(\n    x=-0.07,  # X position (0 is left, 1 is right)\n    y=-0.05,  # Y position (0 is bottom, 1 is top)\n    xref=\"paper\",  # Use paper coordinates (relative to the entire figure)\n    yref=\"paper\",\n    text=\"a\",  # Text to display\n    showarrow=False,  # Don't show an arrow\n    font=dict(size=50, color=\"black\"),  # Font size and color\n    xanchor=\"left\",  # Anchor text to the left\n    yanchor=\"bottom\"  # Anchor text to the bottom\n)\n\n\nfig.show()","identifier":"b0fig3ajn-code","enumerator":"2","html_id":"b0fig3ajn-code","key":"six6TxHMCs"},{"type":"output","id":"mBJQDDGUOatdusnUuNr7_","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"975245b597ad189f1c381fd3b77b6d41","path":"/975245b597ad189f1c381fd3b77b6d41.json"}}}],"identifier":"b0fig3ajn-output","html_id":"b0fig3ajn-output","key":"FvSSHIT4p3"}],"identifier":"b0fig3ajn","label":"b0Fig3ajn","html_id":"b0fig3ajn","key":"EIyQtktFpt"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Load brain (Z 210)\nsusc_brain = nib.load(data_dir / \"field_simulations\" / \"brain\" / \"chi_masked.nii.gz\").get_fdata()\nfmap_hz_brain_all = nib.load(data_dir / \"field_simulations\" / \"brain\" / \"fmap_masked.nii.gz\").get_fdata()\nlocal_field_brain = nib.load(data_dir / \"field_simulations\" / \"brain\" / \"local_field.nii.gz\").get_fdata()\n\n# Rotate brain\n\nsusc_brain = np.rot90(susc_brain, -1)\nfmap_hz_brain_all = np.rot90(fmap_hz_brain_all, -1)\nlocal_field_brain = np.rot90(local_field_brain, -1)\n\nfig_brain = make_subplots(rows=1, cols=3, shared_xaxes=False, horizontal_spacing=0.13, vertical_spacing = 0.12, subplot_titles=(f\"Susceptibility distribution ({CHI_UNICODE})\", \"Simulated B0 map\", \"Simulated B0 map<br>no background field\"), specs=[[{\"type\": \"Heatmap\"}, {\"type\": \"Heatmap\"}, {\"type\": \"Heatmap\"}]])\n\nfig_brain.add_trace(go.Heatmap(z=np.rot90(susc_brain, k=-1), colorscale='gray', colorbar_x=1/3 - 0.09, zmin=-0.5, zmax=0.5, colorbar=dict(title=\"ppm\", titleside=\"top\")), 1, 1)\nfig_brain.add_trace(go.Heatmap(z=np.rot90(fmap_hz_brain_all, k=-1), colorscale='gray', colorbar_x=2/3 - 0.045, zmin=1100, zmax=2300, colorbar=dict(title=\"Hz\", titleside=\"top\")), 1, 2)\nfig_brain.add_trace(go.Heatmap(z=np.rot90(local_field_brain, k=-1), colorscale='gray', zmin=-4, zmax=4, colorbar_x=1-0.004, colorbar=dict(title=\"Hz\", titleside=\"top\")), 1, 3)\n\nfig_brain.update_xaxes(showticklabels=False)\nfig_brain.update_yaxes(showticklabels=False)\nfig_brain.update_layout({\"height\": 350, \"width\": 700},\n                  title_text=\" \",\n                  title_x=0.5,\n                  showlegend=False\n                 )\n\n# Add annotation for \"a\" (Figure 5-a)\nfig_brain.add_annotation(\n    x=-0.07,  # X position (0 is left, 1 is right)\n    y=-0.05,  # Y position (0 is bottom, 1 is top)\n    xref=\"paper\",  # Use paper coordinates (relative to the entire figure)\n    yref=\"paper\",\n    text=\"b\",  # Text to display\n    showarrow=False,  # Don't show an arrow\n    font=dict(size=50, color=\"black\"),  # Font size and color\n    xanchor=\"left\",  # Anchor text to the left\n    yanchor=\"bottom\"  # Anchor text to the bottom\n)\n\n\nfig_brain.show()","identifier":"b0fig3bjn-code","enumerator":"3","html_id":"b0fig3bjn-code","key":"k14jVf8QiC"},{"type":"output","id":"grswziH5yXx6XiRJq7afk","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"b812c5e7cfa27e253f26727301503b75","path":"/b812c5e7cfa27e253f26727301503b75.json"}}}],"identifier":"b0fig3bjn-output","html_id":"b0fig3bjn-output","key":"JZ2iOpcaxU"}],"identifier":"b0fig3bjn","label":"b0Fig3bjn","html_id":"b0fig3bjn","key":"NDtjaZCXrU"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import copy\n\n# Create a deep copy of fig_brain\nfig_inverse = copy.deepcopy(fig_brain)\n\n# Remove the annotation (\"b\") from the new fig object\nfig_inverse.layout.annotations = [ann for ann in fig.layout.annotations if ann.text != \"b\"]\n\n# Flip the traces (susc_brain and local_field_brain) using data from fig_brain\n# Swap z, zmin, and zmax between the first and third traces\n(fig_inverse.data[0].z, fig_inverse.data[1].z) = (fig_brain.data[1].z, fig_brain.data[0].z)  # Swap z\n(fig_inverse.data[0].zmin, fig_inverse.data[1].zmin) = (fig_brain.data[1].zmin, fig_brain.data[0].zmin)  # Swap zmin\n(fig_inverse.data[0].zmax, fig_inverse.data[1].zmax) = (fig_brain.data[1].zmax, fig_brain.data[0].zmax)  # Swap zmax\n\n# Swap the annotation titles by reusing the existing annotations\n(fig_inverse.layout.annotations[0].text, fig_inverse.layout.annotations[1].text) = (\n    fig_brain.layout.annotations[1].text, fig_brain.layout.annotations[0].text\n)\n\n# Remove the third trace\nfig_inverse.data = fig_inverse.data[0:2]\nfig_inverse.layout.annotations = fig_inverse.layout.annotations[0:2]\n\nfig_inverse.update_layout({\"height\": 350, \"width\": 700},\n                  title_text=\" \",\n                  title_x=0.5,\n                  showlegend=False\n                 )\n\n                 \n\n# Show the updated figure\nfig_inverse.show()","identifier":"t2fig7jn-code","enumerator":"4","html_id":"t2fig7jn-code","key":"Hf9dBFnZfO"},{"type":"output","id":"gY0UbUlZ6JOBTm5P-OtSJ","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"59da0425e644b754de311419d3c831ac","path":"/59da0425e644b754de311419d3c831ac.json"}}}],"identifier":"t2fig7jn-output","html_id":"t2fig7jn-output","key":"h6rwSESp7T"}],"identifier":"t2fig7jn","label":"t2Fig7jn","html_id":"t2fig7jn","key":"Px9KcgWZ6u"}],"key":"mTfNio88Ke"},"references":{"cite":{"order":[],"data":{}}}}