{"version":1,"kind":"Notebook","sha256":"cc0d55eb02cc3b13169e3b91b173ff1ce57c91956cf8a7dd5f70575fd4f181f1","slug":"figure-2-2-6","location":"/2 T1 Mapping/2-2 Variable Flip Angle/Notebooks/Figure-2-2-6.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/2 T1 Mapping/2-2 Variable Flip Angle/Notebooks/Figure-2-2-6.ipynb","exports":[{"format":"ipynb","filename":"Figure-2-2-6.ipynb","url":"/Figure-2-2-6-505a443d48282dafc3881c92d0a3bda7.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from repo2data.repo2data import Repo2Data\nimport os \nimport pickle\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom IPython.display import display, HTML\nfrom plotly import tools\n\nfrom contextlib import contextmanager\nimport sys, os\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    data_req_path = os.path.join(\"..\",\"..\",\"..\", \"binder\", \"data_requirement.json\")\n    repo2data = Repo2Data(data_req_path)\n    DATA_ROOT = os.path.join(repo2data.install()[0],\"t1-book-neurolibre\")\n    filename = os.path.join(DATA_ROOT,\"02\",'figure_7.pkl')\n\nwith open(filename, 'rb') as f:\n    T1_map, FA_03, FA_20, B1map, xAxis, yAxis  = pickle.load(f)\n\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\ntrace1 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=FA_03,\n                   colorscale='gray',\n                   showscale = False,\n                   visible=False,\n                   name = 'Signal')\ntrace2 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=FA_20,\n                   colorscale='gray',\n                   showscale = False,\n                   visible=True,\n                   name = 'Signal')\ntrace3 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=B1map,\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='balance',\n                   showscale = False,\n                   visible=False,\n                   name = 'B1 values')\ntrace5 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=T1_map,\n                   zmin=0.0,\n                   zmax=5000,\n                   colorscale='Portland',\n                   xaxis='x2',\n                   yaxis='y2',\n                   visible=True,\n                   name = 'T1 values (ms)')\n\ndata=[trace1, trace2, trace3, trace5]\n\n\nupdatemenus = list([\n    dict(active=1,\n         x = 0.09,\n         xanchor = 'left',\n         y = -0.15,\n         yanchor = 'bottom',\n         direction = 'up',\n         font=dict(\n                family='Times New Roman',\n                size=16\n            ),\n         buttons=list([   \n            dict(label = '3 deg',\n                 method = 'update',\n                 args = [{'visible': [True, False, False, True]},\n                         ]),\n            dict(label = '20 deg',\n                 method = 'update',\n                 args = [{'visible': [False, True, False, True]},\n                           ]),\n            dict(label = 'B<sub>1</sub> map',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, True]},\n                           ])\n        ])\n    )\n])\n\nlayout = dict(\n    width=560,\n    height=345,\n    margin = dict(\n                t=40,\n                r=50,\n                b=10,\n                l=50),\n    annotations=[\n        dict(\n            x=0.055,\n            y=1.15,\n            showarrow=False,\n            text='Input Data',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.6,\n            y=1.15,\n            showarrow=False,\n            text='T<sub>1</sub> map',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=1.22,\n            y=1.15,\n            showarrow=False,\n            text='T<sub>1</sub> (ms)',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 0.58]),\n    yaxis = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    xaxis2 = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0.40, 0.98]),\n    yaxis2 = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1], anchor='x2'),\n    showlegend = False,\n    autosize = False,\n    updatemenus=updatemenus,\n    plot_bgcolor='white'\n)\n\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'vfa_fig_7.html', config = config)\n","identifier":"vfafig7jn-code","enumerator":"1","html_id":"vfafig7jn-code","key":"AqtmeZrXGr"},{"type":"output","id":"CXiWkn0fceDyVbuXFGgor","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"a0d4f951d63e3ef289f47b7a58cd569c","path":"/a0d4f951d63e3ef289f47b7a58cd569c.json"},"text/html":{"content_type":"text/html","hash":"f6fc10b1b449bd67aec2e841b6ff0cbf","path":"/f6fc10b1b449bd67aec2e841b6ff0cbf.html"}}}],"identifier":"vfafig7jn-output","html_id":"vfafig7jn-output","key":"PZz6idDpmd"}],"identifier":"vfafig7jn","label":"vfaFig7jn","html_id":"vfafig7jn","key":"uuJJZ4NA5i"}],"key":"iziO64RM8J"},"references":{"cite":{"order":[],"data":{}}}}