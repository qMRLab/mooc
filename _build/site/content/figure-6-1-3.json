{"version":1,"kind":"Notebook","sha256":"11df1f2f1ec2b7b279e15ec9ebb0e0a9af8e0731da490b49ed8ab1f60ab8774a","slug":"figure-6-1-3","location":"/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-3.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/6 Magnetization Transfer Imaging/1 Quantitative Magnetization Transfer/Notebooks/Figure-6-1-3.ipynb","exports":[{"format":"ipynb","filename":"Figure-6-1-3.ipynb","url":"/Figure-6-1-3-d1207390c12120fa39e95c3637df5a7c.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import scipy\nimport scipy.io as sio\nfrom pathlib import Path\nimport numpy as np\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"06-MT-01-qMT\"\n\n\nnumPulses = np.append(np.arange(10,100,10),np.arange(100,700,100))\nnumPulses = np.append(np.arange(1,6,1),numPulses)\n\ndataSim_Pulses_mat =  scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/blochSim/dataSim_Pulses.mat')\ndatablochSim_Pulses_mat =  scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/blochSim/datablochSim_Pulses.mat')\ndataRaw_Pulses_mat =  scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/blochSim/dataRaw_Pulses.mat')\ndatablochSimResetMz_Pulses_mat =  scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/blochSim/datablochSimResetMz_Pulses.mat')\ndataRawResetMz_Pulses_mat =  scipy.io.loadmat(data_dir / 'qMT_tutorial-ISMRM2022-main' / 'results/blochSim/dataRawResetMz_Pulses.mat')\n\ndataSimAnalytical_Pulses = np.array(dataSim_Pulses_mat[\"dataSim_Pulses\"])\ndataBlochSim_Pulses = np.array(datablochSim_Pulses_mat[\"datablochSim_Pulses\"])\ndataRaw_Pulses = np.array(dataRaw_Pulses_mat[\"dataRaw_Pulses\"])\ndataBlochSimResetMz_Pulses = np.array(datablochSimResetMz_Pulses_mat[\"datablochSimResetMz_Pulses\"])\ndataRawResetMz_Pulses = np.array(dataRawResetMz_Pulses_mat[\"dataRawResetMz_Pulses\"])\n\n\n\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib.image import imread\nimport scipy.io\nimport plotly\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n\ndataSimAnalyticalPulses1 = [dict(\n        visible = False,\n        x = dataSimAnalytical_Pulses[:,0,0],\n        y = dataSimAnalytical_Pulses[:,1,ii],\n        line = dict(color = \"firebrick\"),\n        name = 'Analytical Solution (angle = 142)',\n        hovertemplate = 'Analytical Solution (angle = 142)<br>M<sub>z</sub> = %{y}<br>Offset = %{x} Hz<extra></extra>') for ii in range(len(numPulses))]\n\ndataSimAnalyticalPulses1[4]['visible'] = True\n\ndataSimAnalyticalPulses2 = [dict(\n        visible = False,\n        x = dataSimAnalytical_Pulses[:,0,0],\n        y = dataSimAnalytical_Pulses[:,2,ii],\n        line = dict(color = \"royalblue\"),\n        name = 'Analytical Solution (angle = 426)',\n        hovertemplate = 'Analytical Solution (angle = 426)<br>M<sub>z</sub> = %{y}<br>Offset = %{x} Hz<extra></extra>') for ii in range(len(numPulses))]\n\ndataSimAnalyticalPulses2[4]['visible'] = True\n\ndataBlochSimPulses1 = [dict(\n        visible = False,\n        x = dataBlochSim_Pulses[:,0,0],\n        y = dataBlochSim_Pulses[:,1,ii],\n        line = dict(\n            color = \"firebrick\",\n            dash = 'dash'),\n        name = 'Bloch Simulation (angle = 142)',\n        text = 'Bloch Simulation (angle = 142)',\n        hovertemplate = 'Bloch Simulation (angle = 142)<br>M<sub>z</sub> = %{y}<br>Offset = %{x} Hz<extra></extra>') for ii in range(len(numPulses))]\n\ndataBlochSimPulses1[4]['visible'] = True\n\ndataBlochSimPulses2 = [dict(\n        visible = False,\n        x = dataBlochSim_Pulses[:,0,0],\n        y = dataBlochSim_Pulses[:,2,ii],\n        line = dict(\n            color = \"royalblue\",\n            dash = 'dash'),\n        name = 'Bloch Simulation (angle = 426)',\n        hovertemplate = 'Bloch Simulation (angle = 426)<br>M<sub>z</sub> = %{y}<br>Offset = %{x} Hz<extra></extra>') for ii in range(len(numPulses))]\n\ndataBlochSimPulses2[4]['visible'] = True\n\ndataRawPulses = [dict(\n        visible = False,\n        mode = 'markers',\n        marker = dict(color = \"darkslategray\"),\n        x = dataRaw_Pulses[:,0,0],\n        y = dataRaw_Pulses[:,1,ii],\n        name = 'Raw data',\n        hovertemplate = 'Raw data<br>M<sub>z</sub> = %{y}<br>Offset = %{x} Hz<extra></extra>') for ii in range(len(numPulses))]\n\ndataRawPulses[4]['visible'] = True\n\ndata = dataSimAnalyticalPulses1 + dataSimAnalyticalPulses2 + dataBlochSimPulses1 + dataBlochSimPulses2 + dataRawPulses\n\nsteps = []\nfor i in range(len(numPulses)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(dataSimAnalyticalPulses1)],\n        label = str(numPulses[i])\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    x = 0,\n    y = -0.0,\n    active = 7,\n    currentvalue = {\"prefix\": \"# of Pulses: <b>\"},\n    pad = {\"t\": 50, \"b\": 10},\n    steps = steps\n)]\n\nlayout = go.Layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    width=580,\n    height=450,\n    margin=go.layout.Margin(\n        l=80,\n        r=40,\n        b=60,\n        t=10,\n    ),\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.2,\n            showarrow=False,\n            text='Frequency offset \\u0394 (Hz)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.14,\n            y=0.5,\n            showarrow=False,\n            text='Magnetization |M<sub>z</sub>|',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        autorange=False,\n        type=\"log\",\n        range=[2, 5],\n        dtick=1,\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        autorange=False,\n        range=[0, 1.1],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    legend=dict(\n        x=0.5,\n        y=0.05,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ), \n    sliders=sliders\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-line', config = config)","identifier":"qmtfig3jn-code","enumerator":"1","html_id":"qmtfig3jn-code","key":"xTGaHMb2Dh"},{"type":"output","id":"pagYN9AZQIzgvMA6xaURS","data":[],"identifier":"qmtfig3jn-output","html_id":"qmtfig3jn-output","key":"esEltxKEm2"}],"identifier":"qmtfig3jn","label":"qmtFig3jn","html_id":"qmtfig3jn","key":"r8gPAXOARm"}],"key":"RQDNU0u7G1"},"references":{"cite":{"order":[],"data":{}}}}