{"version":1,"kind":"Notebook","sha256":"faf434e9dd17d021284f852720717900f85a62f4df97af79c9f079771aa3bb01","slug":"figure-2-2-5","location":"/2 T1 Mapping/2-2 Variable Flip Angle/Notebooks/Figure-2-2-5.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/2 T1 Mapping/2-2 Variable Flip Angle/Notebooks/Figure-2-2-5.ipynb","exports":[{"format":"ipynb","filename":"Figure-2-2-5.ipynb","url":"/Figure-2-2-5-b51c7c13e22f05b53805a8efefdc3879.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from repo2data.repo2data import Repo2Data\nimport os \nimport pickle\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom IPython.display import display, HTML\nfrom plotly import tools\nfrom pathlib import Path\n\nfrom contextlib import contextmanager\nimport sys, os\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n    \nDATA_ROOT = dataset_path / \"t1-book-neurolibre\"    \nfilename = os.path.join(DATA_ROOT,\"02\",'figure_6.pkl')\n\nwith open(filename, 'rb') as f:\n    B1Range, mean_T1_noB1Correction, mean_T1_withB1Correction, std_T1_noB1Correction, std_T1_withB1Correction = pickle.load(f)\n\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\ndata1 = dict(\n        visible = True,\n        x = B1Range,\n        y = mean_T1_noB1Correction,\n        name = 'Nominal flip angles',\n        text = 'Nominal flip angles',\n        mode = 'lines+markers',\n        hoverinfo = 'x+y+text',\n        line = dict(\n            color = ('rgb(22, 96, 167)'),\n            ),\n        error_y=dict(\n            type='data',\n            array=std_T1_noB1Correction,\n            visible=True,\n            color = ('rgb(142, 192, 240)')\n        ))\n\ndata2 = dict(\n        visible = True,\n        x = B1Range,\n        y = mean_T1_withB1Correction,\n        name = 'B<sub>1</sub>-corrected flip angles',\n        text = 'B<sub>1</sub>-corrected flip angles',\n        mode = 'lines+markers',\n        hoverinfo = 'x+y+text',\n        line = dict(\n            color = ('rgb(205, 12, 24)'),\n            ),\n        error_y=dict(\n            type='data',\n            array=std_T1_withB1Correction,\n            visible=True,\n            color = ('rgb(248, 135, 142)')\n        ))\n\ndata = [data1, data2]\n\nlayout = go.Layout(\n    width=580,\n    height=450,\n    margin=go.layout.Margin(\n        l=80,\n        r=80,\n        b=60,\n        t=60,\n    ),\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.14,\n            showarrow=False,\n            text='B<sub>1</sub> (n.u.)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.17,\n            y=0.5,\n            showarrow=False,\n            text='T<sub>1</sub> (s)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        autorange=False,\n        range=[B1Range[0], B1Range[-1]],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        autorange=False,\n        range=[0, max(mean_T1_noB1Correction)],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    legend=dict(\n        x=0.32,\n        y=0.98,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ),\n    plot_bgcolor='white'\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'vfa_fig_6.html', config = config)\n","identifier":"vfafig6jn-code","enumerator":"1","html_id":"vfafig6jn-code","key":"TmokojhCBS"},{"type":"output","id":"qvh96Kcrg9I1HzSgzK6ik","data":[],"identifier":"vfafig6jn-output","html_id":"vfafig6jn-output","key":"gBLeq7Xeyg"}],"identifier":"vfafig6jn","label":"vfaFig6jn","html_id":"vfafig6jn","key":"nvAmx5xSxY"}],"key":"BLUfHT7MMN"},"references":{"cite":{"order":[],"data":{}}}}