{"version":1,"kind":"Notebook","sha256":"150680d719cf06130437266d5965b6c42c18ab8b7410d2c0941128ae01cceb7b","slug":"figure-2-1-5","location":"/2 T1 Mapping/2-1 Inversion Recovery/Notebooks/Figure-2-1-5.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/2 T1 Mapping/2-1 Inversion Recovery/Notebooks/Figure-2-1-5.ipynb","exports":[{"format":"ipynb","filename":"Figure-2-1-5.ipynb","url":"/Figure-2-1-5-e6d0ce3699e9a90f70c0de6a2d28fb51.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{"tags":["fig2p2cell"]},"children":[{"type":"code","lang":"python","executable":true,"value":"from repo2data.repo2data import Repo2Data\nimport os \nimport pickle\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom IPython.display import display, HTML\nfrom plotly import tools\n\nfrom contextlib import contextmanager\nimport sys, os\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    data_req_path = os.path.join(\"..\",\"..\",\"..\", \"binder\", \"data_requirement.json\")\n    repo2data = Repo2Data(data_req_path)\n    DATA_ROOT = os.path.join(repo2data.install()[0],\"t1-book-neurolibre\")\n    filename = os.path.join(DATA_ROOT,\"01\",'figure_6.pkl')\n\nwith open(filename, 'rb') as f:\n    TR_range, TI_lowres, TI_highres, T1_mean, T1_std, data_mean, data_std, data_noiseless = pickle.load(f)\n\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\ndata1 = [dict(\n        visible = False,\n        x = np.squeeze(np.asarray(TI_lowres[ii,:])),\n        y = np.squeeze(np.asarray(data_mean[ii,:])),\n        error_y=dict(\n            type='data',\n            color = ('rgb(22, 96, 167)'),\n            array=np.squeeze(np.asarray(data_std[ii,:])),\n            visible=True\n        ),\n        line = dict(\n            color = ('rgb(22, 96, 167)'),\n            dash = 'dot'),\n        mode = 'markers',\n        name = 'Monte Carlo simulated signal',\n        text = 'Monte Carlo simulated signal',\n        hoverinfo = 'x+y+text') for ii in range(len(TR_range))]\n\ndata1[28]['visible'] = True\n\ndata2 = [dict(\n        visible = False,\n        x = np.squeeze(np.asarray(TI_highres[ii,:])),\n        y = np.squeeze(np.asarray(data_noiseless[ii,:])),\n        line = dict(\n            color = ('rgb(247, 152, 19)'),\n            ),\n        name = 'Noiseless signal',\n        text = 'Noiseless signal',\n        hoverinfo = 'x+y+text') for ii in range(len(TR_range))]\n\ndata2[28]['visible'] = True\n\ndata_meanT1 = [dict(\n    visible = False,\n    x = TR_range,\n    y = T1_mean,\n    name = 'Mean T<sub>1</sub> (s)',\n    text = 'Mean T<sub>1</sub> (s)',\n    hoverinfo = 'x+y+text',\n    xaxis='x2',\n    yaxis='y2') for ii in range(len(TR_range))]\n\ndata_meanT1[15]['visible'] = True\n\ndata_stdT1 = [dict(\n    visible = False,\n    x = TR_range,\n    y = T1_std,\n    line = dict(\n        color = ('rgb(222, 22, 22)'),\n        ),\n    name = 'STD T<sub>1</sub> (s)',\n    text = 'STD T<sub>1</sub> (s)',\n    hoverinfo = 'x+y+text',\n    xaxis='x2',\n    yaxis='y3') for ii in range(len(TR_range))]\n\ndata_stdT1[28]['visible'] = True\n\ndata = data2 + data1 + data_meanT1 + data_stdT1\n\nsteps = []\nfor i in range(len(TR_range)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data1)],\n        label = str(TR_range[i])\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    x = 0,\n    y = -0.02,\n    active = 28,\n    currentvalue = {\"prefix\": \"TR value (ms): <b>\"},\n    pad = {\"t\": 50, \"b\": 10},\n    steps = steps\n)]\n\nlayout = go.Layout(\n    width=540,\n    height=540,\n    margin = dict(\n                t=0,\n                r=25,\n                b=100,\n                l=75),\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.17,\n            showarrow=False,\n            text='Inversion Time – TI (ms)',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.15,\n            y=0.5,\n            showarrow=False,\n            text='Signal (magnitude)',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.76,\n            y=0.77,\n            showarrow=False,\n            text='<b>TR (ms)<b>',\n            font=dict(\n                family='Times New Roman',\n                size=14\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.40,\n            y=0.35,\n            showarrow=False,\n            text='<b>Mean T<sub>1</sub> (ms)<b>',\n            font=dict(\n                family='Times New Roman',\n                size=14\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=1.00,\n            y=0.35,\n            showarrow=False,\n            text='<b>STD T<sub>1</sub> (ms)<b>',\n            font=dict(\n                family='Times New Roman',\n                size=14\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        )\n    ],\n    xaxis=dict(\n        autorange=False,\n        range=[0, 5000],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        autorange=False,\n        range=[0, 1],\n        showgrid=False,\n        linecolor='black',\n        linewidth=2\n    ),\n    xaxis2=dict(\n        domain=[0.5, 0.90],\n        anchor='y2',\n        mirror = True,\n        side='top',\n        ticks='inside',\n        showline=True,\n    ),\n    yaxis2=dict(\n        autorange=False,\n        range=[500, 1300],\n        domain=[0.05, 0.65],\n        anchor='x2',\n        mirror = True,\n        ticks='inside',\n        showline=True,\n    ),\n    yaxis3=dict(\n        autorange=False,\n        range=[0, 190],\n        domain=[0.05, 0.65],\n        anchor='x2',\n        overlaying='y2',\n        side='right',\n        ticks='inside',\n    ),\n    legend=dict(\n        x=0.3,\n        y=1.35,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    ), \n    sliders=sliders,\n    plot_bgcolor='white'\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'ir_fig_6.html', config = config)\n","identifier":"irfig6jn-code","visibility":"show","enumerator":"1","html_id":"irfig6jn-code","key":"ZgUlyB8tOi"},{"type":"output","id":"oOaQXfdLb24Tx97SeLd9l","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"b4a35da205661d165ad9b81ca07f0541","path":"/b4a35da205661d165ad9b81ca07f0541.json"},"text/html":{"content_type":"text/html","hash":"cd2bafe8c1574fcf268d72757cf87bc2","path":"/cd2bafe8c1574fcf268d72757cf87bc2.html"}}}],"identifier":"irfig6jn-output","visibility":"show","html_id":"irfig6jn-output","key":"QBeNzYs88t"}],"identifier":"irfig6jn","label":"irFig6jn","html_id":"irfig6jn","visibility":"show","key":"sce1Si8Yug"}],"key":"zM79MkLgvV"},"references":{"cite":{"order":[],"data":{}}}}