{"version":1,"kind":"Notebook","sha256":"6d6c07d202f902a518910eb51eb4a21c698fac9cc91ff9feacb7f06b4edcafc0","slug":"figure-2-3-1","location":"/2 T1 Mapping/2-3 MP2RAGE/Notebooks/Figure-2-3-1.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/2 T1 Mapping/2-3 MP2RAGE/Notebooks/Figure-2-3-1.ipynb","exports":[{"format":"ipynb","filename":"Figure-2-3-1.ipynb","url":"/Figure-2-3-1-4ba828d8e4240af8129fb3e0133d6ec7.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n    \n\ndata_dir = dataset_path / \"02-T1-03-MP2RAGE\"\ndata_file = \"fig1.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nT1matrix = mat_contents[\"T1matrix\"]\nB1_vector = mat_contents[\"B1_vector\"][0]\nMP2RAGE_vector = mat_contents[\"MP2RAGE_vector\"][0]\n\n## Plot\n# PYTHON CODE\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n# The polling here is to ensure that plotly.js has already been loaded before\n# setting display alignment in order to avoid a race condition.\n\ntrace5 = go.Heatmap(x = MP2RAGE_vector,\n                   y = B1_vector,\n                   z=T1matrix,\n                   zmin=0,\n                   zmax=5,\n                   colorscale='Portland',\n                   xaxis='x2',\n                   yaxis='y2',\n                   visible=True,\n                   name = 'T1 values (ms)')\n\ndata=[trace5]\n\nlayout = dict(\n    width=560,\n    height=345,\n    margin = dict(\n                t=40,\n                r=50,\n                b=50,\n                l=80),\n    annotations=[\n         dict(\n            x=-0.14,\n            y=0.5,\n            showarrow=False,\n            text='B<sub>1</sub> values',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n          dict(\n            x=0.5,\n            y=-0.2,\n            showarrow=False,\n            text='S<sub>MP2RAGE</sub> values',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.5,\n            y=1.15,\n            showarrow=False,\n            text='Lookup Table',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=1.17,\n            y=1.15,\n            showarrow=False,\n            text='T<sub>1</sub> (ms)',\n            font=dict(\n                family='Times New Roman',\n                size=20\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis = dict(range = [0,1], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 0.5]),\n    yaxis = dict(range = [0,1], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    showlegend = False,\n    autosize = False,\n)\n\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-heatmap', config = config)","identifier":"mp2ragefig2jn-code","enumerator":"1","html_id":"mp2ragefig2jn-code","key":"RUGziciKan"},{"type":"output","id":"7M8VMCDvS1LbOBvspPdlH","data":[],"identifier":"mp2ragefig2jn-output","html_id":"mp2ragefig2jn-output","key":"QLmtlzx2Qp"}],"identifier":"mp2ragefig2jn","label":"mp2rageFig2jn","html_id":"mp2ragefig2jn","key":"otXC4Y6jiR"}],"key":"SWpjoZI6fQ"},"references":{"cite":{"order":[],"data":{}}}}