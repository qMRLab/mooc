{"version":1,"kind":"Notebook","sha256":"ef5712daae26d6dc87512ca9a596065de3e21b9a7e78e1bb9da44a02cd58b96d","slug":"figure-5-2-2","location":"/5 B0 Mapping/2 Dual echo B0 mapping/Notebooks/Figure-5-2-2.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/5 B0 Mapping/2 Dual echo B0 mapping/Notebooks/Figure-5-2-2.ipynb","exports":[{"format":"ipynb","filename":"Figure-5-2-2.ipynb","url":"/Figure-5-2-2-86b5948e0d8a383bbd894d90f28317fa.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\nimport numpy as np\nimport plotly.express as px\nimport os\nimport nibabel as nib\nimport numpy as np\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport math\nimport json\n\nimport scipy.io as sio\nfrom pathlib import Path\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"05-B0/data/fmap\"\n\nPI_UNICODE = \"\\U0001D70B\"\nfname_mag_e1 = data_dir / \"sub-fmap_magnitude1.nii.gz\"\nfname_phase_e1 = data_dir / \"sub-fmap_phase1.nii.gz\"\nfname_phase_e1_json = data_dir / \"sub-fmap_phase1.json\"\nfname_phase_e2 = data_dir / \"sub-fmap_phase2.nii.gz\"\nfname_mask = data_dir / \"mask.nii.gz\"\nfname_fmap = data_dir / \"fmap.nii.gz\"\n\nnii_mag_e1 = nib.load(fname_mag_e1)\nnii_phase_e1 = nib.load(fname_phase_e1)\nnii_phase_e2 = nib.load(fname_phase_e2)\nnii_mask = nib.load(fname_mask)\nnii_fmap = nib.load(fname_fmap)\n\n# Phase evolution though different echo times\nmask = nii_mask.get_fdata()[30:-30,8:105,30]\nfmap = nii_fmap.get_fdata()[30:-30,8:105,30] * mask  # [Hz]\nphase1 = (nii_phase_e1.get_fdata()[30:-30,8:105,30] / 4095 * 2 * math.pi - math.pi) * mask\n\nwith open(fname_phase_e1_json, 'r') as json_data1:\n    data1 = json.load(json_data1)\n    \necho_time1 = data1['EchoTime']\nphase0 = phase1 - (echo_time1 * (fmap * 2 * math.pi))\nzmin = -math.pi\nzmax = math.pi\n\nsteps = 31\nlast_echo_time = 0.03\necho_times = np.linspace(0.0, last_echo_time, steps)\nfig = go.Figure()\nfor i_echo, echo_time in enumerate(echo_times):\n    phase = phase0 + (fmap * echo_time * 2 * math.pi)\n    phase = np.angle(np.exp(1j*phase))\n    if i_echo >= len(echo_times) - 1:\n        fig.add_trace(go.Heatmap(z=np.rot90(phase, k=-1), visible=True, coloraxis = \"coloraxis\"))\n    else:\n        fig.add_trace(go.Heatmap(z=np.rot90(phase, k=-1), visible=False, coloraxis = \"coloraxis\"))\n\nfig.update_layout(coloraxis = {'colorscale':'gray'},\n                 coloraxis_cmin=zmin, coloraxis_cmax=zmax)\nfig.update_coloraxes(\n    colorbar=dict(title=\"Rad\",\n                  titleside=\"top\",\n                  tickmode=\"array\",\n                  tickvals=[-math.pi, 0, math.pi-0.01],\n                  ticktext = [f\"-{PI_UNICODE}\", 0, f'{PI_UNICODE}']))\n\necho_times_str = [f\"{time:.2}\" for time in echo_times]\nsteps = []\nfor i in range(len(fig.data)):\n    step = dict(\n        method=\"update\",\n        label=echo_times_str[i],\n        args=[{\"visible\": [False] * len(fig.data)}],  # layout attribute\n    )\n    step[\"args\"][0][\"visible\"][i] = True  # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active=30,\n    currentvalue={\"prefix\": \"Echo Time (s): \"},\n    steps=steps\n)]\n\nfig.update_layout(\n    sliders=sliders\n)\n\nfig.update_layout(\n    title=dict(text=\"Phase at different echo times\", x=0.5)\n)\nfig.update_xaxes(showticklabels=False)\nfig.update_yaxes(showticklabels=False)\nfig.update_layout({\"height\": 550, \"width\": 500})\nfig.show()","identifier":"b0fig7jn-code","enumerator":"1","html_id":"b0fig7jn-code","key":"kkaBrUF9U8"},{"type":"output","id":"G1Zqkr05BWl6XrHucy57k","data":[],"identifier":"b0fig7jn-output","html_id":"b0fig7jn-output","key":"jvvBK85pxi"}],"identifier":"b0fig7jn","label":"b0Fig7jn","html_id":"b0fig7jn","key":"bUXAxHSFG8"}],"key":"GuOKxjozc8"},"references":{"cite":{"order":[],"data":{}}}}