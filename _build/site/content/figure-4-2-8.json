{"version":1,"kind":"Notebook","sha256":"b6586390746ae79ee1950d546b98b78d9a764d7418d985b1688715510cdc86e7","slug":"figure-4-2-8","location":"/4 B1 Mapping/02-Actual Flip Angle Imaging/Notebooks/Figure-4-2-8.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/4 B1 Mapping/02-Actual Flip Angle Imaging/Notebooks/Figure-4-2-8.ipynb","exports":[{"format":"ipynb","filename":"Figure-4-2-8.ipynb","url":"/Figure-4-2-8-15cdac54fadbf74006dac4a871781c93.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nimport numpy as np\nfrom pathlib import Path\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"04-B1-02-AFI\"\ndata_file = \"fig7.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nB1map_raw = mat_contents[\"B1map_raw\"]\nAFIData1 = mat_contents[\"AFIData1\"]\nAFIData2 = mat_contents[\"AFIData2\"]\nmask = mat_contents[\"mask\"]\nxAxis = mat_contents[\"xAxis\"][0]\nyAxis = mat_contents[\"yAxis\"][0]\n\n# Masking B1 map\nB1map_raw = np.asarray(B1map_raw)\nmask = np.asarray(mask)\nB1map_raw_masked = B1map_raw*mask\nB1map_raw_masked[np.isnan(B1map_raw_masked)] = 0\n\ndata_dir = Path(\"../../../../DATA/qmrlab-mooc/04-B1-02-AFI\")\ndata_file = \"fig8.mat\"\n\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\nB1map_filtered = mat_contents[\"B1map_filtered\"]\n\n## Plot\n# PYTHON CODE\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n# PYTHON CODE\nfrom plotly import tools\n\n# Masking B1 map\nB1map_filtered = np.asarray(B1map_filtered)\nmask = np.asarray(mask)\nB1map_filtered_masked = B1map_filtered*mask\nB1map_filtered_masked[np.isnan(B1map_filtered_masked)] = 0\n\ntrace1 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=B1map_raw_masked,\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='RdBu',\n                   showscale = False,\n                   visible=True,\n                   name = 'B1 values')\ntrace2 = go.Heatmap(x = xAxis,\n                   y = yAxis,\n                   z=B1map_filtered_masked,\n                   zmin=0.7,\n                   zmax=1.3,\n                   colorscale='RdBu',\n                   xaxis='x2',\n                   yaxis='y2',\n                   visible=True,\n                   name = 'B1 values')\n\ndata=[trace1, trace2]\n\nlayout = dict(\n    width=560,\n    height=310,\n    margin = dict(\n                t=40,\n                r=50,\n                b=10,\n                l=50),\n    annotations=[\n        dict(\n            x=0.04,\n            y=1.15,\n            showarrow=False,\n            text='Raw B<sub>1</sub> map',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=0.60,\n            y=1.15,\n            showarrow=False,\n            text='Filtered B<sub>1</sub> map',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=1.12,\n            y=1.15,\n            showarrow=False,\n            text='B<sub>1</sub>',\n            font=dict(\n                family='Times New Roman',\n                size=26\n            ),\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 0.58]),\n    yaxis = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1]),\n    xaxis2 = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0.40, 0.98]),\n    yaxis2 = dict(range = [0,127], autorange = False,\n             showgrid = False, zeroline = False, showticklabels = False,\n             ticks = '', domain=[0, 1], anchor='x2'),\n    showlegend = False,\n    autosize = False,\n)\n\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'basic-heatmap', config = config)","identifier":"afifig8jn-code","enumerator":"1","html_id":"afifig8jn-code","key":"qSWWClUozv"},{"type":"output","id":"sSUAvu8g1Hhyaz38Ky4AZ","data":[],"identifier":"afifig8jn-output","html_id":"afifig8jn-output","key":"qIqsCy7E6z"}],"identifier":"afifig8jn","label":"afiFig8jn","html_id":"afifig8jn","key":"JhVzcJvYI8"}],"key":"bJSgZHk4Mm"},"references":{"cite":{"order":[],"data":{}}}}