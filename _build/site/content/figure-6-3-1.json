{"version":1,"kind":"Notebook","sha256":"9070fd54b8581177db01602af5368772bea7871a07b10a6b1860a1465fc97884","slug":"figure-6-3-1","location":"/6 Magnetization Transfer Imaging/3 Magnetization Transfer Saturation/Notebooks/Figure-6-3-1.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"mooc","language":"python"},"date":"2024-10-08","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/qmrlab/mooc","subject":"mOOC","venue":{"title":"qMRLab"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true},"title":{"offset":1}},"keywords":["quantitative MRI","education"],"copyright":"NeuroPoly 2024","abbreviations":{"MRI":"Magnetic resonance imaging","MR":"Magnetic resonance","NMR":"Nuclear Magnetic Resonance","qMRI":"quantitative magnetic resonance imaging","GPT":"Generative Pre-trained Transformer","MRM":"Magnetic Resonance in Medicine","B0":"Main magnetic field","B1":"Radiofrequency field","FID":"Free Induction Decay","Gx":"X-axis gradient","Gy":"Y-axis gradient","Gz":"Z-axis gradient","TR":"Repetition Time","TE":"Echo Time","TI":"Inversion Time","CSF":"Cerebrospinal fluid","T1":"Longitudinal magnetization relaxation time constant","_T_{sub}`1`":"Longitudinal magnetization relaxation time constant","T2":"Transverse magnetization relaxation time constant","SE":"Spin Echo","GRE":"Gradient Echo","SPGR":"Spoiled Gradient Echo (sequence)","UMAP":"Uniform manifold approximation and projection","ADC":"Analog to digital converter","RF":"Radiofrequency","FA":"Flip Angle","VFA":"Variable Flip Angle","DESPOT1":"Driven Equilibrium Single Pulse Observation of _T_{sub}`1`","SNR":"Signal-to-noise ratio","RD-NLS":"reduced-dimension non-linear least-squares","STD":"Standard deviation","MT":"Magnetization Transfer","MTR":"Magnetization Transfer Ratio","MS":"Multiple Sclerosis","qMT":"Quantitative Magnetization Transfer","MTsat":"Magnetization Transfer saturation","SAR":"Specific absorption rate","FWHM":"Full width at half maximum"},"edit_url":"https://github.com/qmrlab/mooc/blob/mb/requirements/6 Magnetization Transfer Imaging/3 Magnetization Transfer Saturation/Notebooks/Figure-6-3-1.ipynb","exports":[{"format":"ipynb","filename":"Figure-6-3-1.ipynb","url":"/Figure-6-3-1-9f7a36cc80f29116b9cbe50de4ed0382.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare Python environment\n\nimport scipy.io as sio\nfrom pathlib import Path\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom repo2data.repo2data import Repo2Data\n\n@contextmanager\ndef suppress_stdout():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = sys.stdout\n        sys.stdout = devnull\n        try:  \n            yield\n        finally:\n            sys.stdout = old_stdout\n\nwith suppress_stdout():\n    repo_path = Path(os.path.abspath('')).parents[2]\n    data_req_path = repo_path / \"binder\" / \"data_requirement.json\"\n    data_path = repo_path / '..' / \"data\"\n    dataset_path = data_path / \"qmrlab-mooc\"\n    \n    if not dataset_path.exists():\n        repo2data = Repo2Data(data_req_path)\n\ndata_dir = dataset_path / \"06-MT-03-MTsat\"\ndata_file = \"fig0.mat\"\n\n#Load either archived or generated plot variables\nmat_contents = sio.loadmat(data_dir / data_file)\n\n## Plot\n\n# Module imports\n# PYTHON CODE\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n\n# Prepare Python environment\n\ntissues = [\n    \"Healthy Cortical GM\",\n    \"Healthy WM\",\n    \"NAWM\",\n    \"Early WM MS Lesion\",\n    \"Late WM MS Lesion\",\n    ]\n    \nprotocols = [\n    \"Helms 2008\",\n    \"Weiskopf 2013\",\n    \"Campbell 2018\",\n    \"Karakuzu 2022 Siemens 1\",\n    \"Karakuzu 2022 GE 1\",\n    \"York 2022\",\n    ]\n    \nsignal_Helms = mat_contents[\"MTsats\"][0]\nsignal_Weiskopf = mat_contents[\"MTsats\"][1]\nsignal_Campbell = mat_contents[\"MTsats\"][2]\nsignal_KarakuzuSiemens = mat_contents[\"MTsats\"][3]\nsignal_KarakuzuGE = mat_contents[\"MTsats\"][4]\nsignal_York = mat_contents[\"MTsats\"][5]\n\n\n# Plot Figure 1\n\n# Module imports\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nconfig={'showLink': False, 'displayModeBar': False}\n\ninit_notebook_mode(connected=True)\n\n# PYTHON CODE\n\ninit_notebook_mode(connected=True)\n# The polling here is to ensure that plotly.js has already been loaded before\n# setting display alignment in order to avoid a race condition.\n\n\ndata_Helms = go.Scatter(\n    x = tissues,\n    y = signal_Helms,\n    name = protocols[0],\n    text = 'N/A',\n    hoverinfo = 'y'\n)\n\n\ndata_Weiskopf = go.Scatter(\n    x = tissues,\n    y = signal_Weiskopf,\n    name = protocols[1],\n    hoverinfo = 'y'\n)\n\n\ndata_Campbell = go.Scatter(\n    x = tissues,\n    y = signal_Campbell,\n    name = protocols[2],\n    hoverinfo = 'y'\n)\n\n\ndata_KarakuzuSiemens = go.Scatter(\n    x = tissues,\n    y = signal_KarakuzuSiemens,\n    name = protocols[3],\n    hoverinfo = 'y'\n)\n\ndata_KarakuzuGE = go.Scatter(\n    x = tissues,\n    y = signal_KarakuzuGE,\n    name = protocols[4],\n    hoverinfo = 'y'\n)\n\ndata_York = go.Scatter(\n    x = tissues,\n    y = signal_York,\n    name = protocols[5],\n    hoverinfo = 'y'\n)\n\n\ndata = [data_Helms, data_Weiskopf, data_Campbell, data_KarakuzuSiemens, data_KarakuzuGE, data_York]\n\nlayout = go.Layout(\n    width=750,\n    height=750,\n    margin=go.layout.Margin(\n        l=100,\n        r=80,\n        b=100,\n        t=130,\n    ),\n    annotations=[\n        dict(\n            x=-0.15,\n            y=0.50,\n            showarrow=False,\n            text='MTsat (%)',\n            font=dict(\n                family='Times New Roman',\n                size=22\n            ),\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        ),\n    ],\n    xaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2\n    ),\n    yaxis=dict(\n        showgrid=True,\n        gridcolor='rgb(169,169,169)',\n        linecolor='black',\n        linewidth=2\n    ),\n    legend=dict(\n        x=0.25,\n        y=1.3,\n        traceorder='normal',\n        font=dict(\n            family='Times New Roman',\n            size=12,\n            color='#000'\n        ),\n        bordercolor='#000000',\n        borderwidth=2\n    )\n)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename = 'fig1.html', config = config)\n","identifier":"mtsatfig1jn-code","enumerator":"1","html_id":"mtsatfig1jn-code","key":"r64R8ehWd0"},{"type":"output","id":"mU8c4sisALKh8AUMxi0RD","data":[],"identifier":"mtsatfig1jn-output","html_id":"mtsatfig1jn-output","key":"VQ5p9bfzQG"}],"identifier":"mtsatfig1jn","label":"mtsatFig1jn","html_id":"mtsatfig1jn","key":"K0XRt0xlnb"}],"key":"xL88tMnGGM"},"references":{"cite":{"order":[],"data":{}}}}